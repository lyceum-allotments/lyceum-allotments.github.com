<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python And Pipes on The Lyceum Allotments</title>
    <link>https://lyceum-allotments.github.io/series/python-and-pipes/</link>
    <description>Recent content in Python And Pipes on The Lyceum Allotments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 23:46:37 +0000</lastBuildDate>
    <atom:link href="https://lyceum-allotments.github.io/series/python-and-pipes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python and Pipes Part 6: Multiple Subprocesses and Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:46:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/&#34;&gt;previous
section&lt;/a&gt;
we explored start a subprocess and controlling its input and output via
pipes. In this section we&amp;rsquo;ll do the same, but this time for two sub-processes.
A use for this, and the original reason I first developed this, was for testing
a client and server. Basically, I wanted a program to start up the client and
the server, to provide a set of pre-scripted commands to each to get them in a
certain state, and then a way of providing my own custom commands, to do some
interactive testing.&lt;/p&gt;

&lt;p&gt;What we aim to end up with is a program that starts up two sub-processes, let&amp;rsquo;s
call them &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, and connects to two named pipes in the file system. From
these two pipes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; will read their respective inputs. Output from both
of the processes will be printed on &lt;code&gt;stdout&lt;/code&gt;, but to enable us to differentiate
which output comes from which process we&amp;rsquo;ll prepend output from process &lt;code&gt;A&lt;/code&gt; with
an &lt;code&gt;A:&lt;/code&gt; and from process &lt;code&gt;B&lt;/code&gt; with a &lt;code&gt;B:&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-two-sub-processes:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;The Two Sub-Processes&lt;/h2&gt;

&lt;p&gt;As an illustration of what can be achieved, the two sub-processes that we are
going to spawn will be kept very simple, doing nothing more than printing a
prompt, reading a line of input, echoing that back and prompting for more input:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# proc_a.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc A say?&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name[:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Proc A says, &lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(name)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc A say?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# proc_b.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc B say?&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name[:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Proc B says, &lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(name)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc B say?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A program to start both of these sub-processes and run them until
either of them, or the mother process, finishes, looks pretty similar
to the stuff we were doing with sub-processes in the previous section:
all we have to do is two start two subprocesses rather than one and make
sure we poll and check two return codes rather than one:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# two_subprocesses.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start both `proc_a.py` and `proc_b.py`&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# check if either sub-process has finished&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that both our subprocesses are opened with their &lt;code&gt;stdin&lt;/code&gt;s and &lt;code&gt;stdout&lt;/code&gt;s
from internal pipes. This is necessary because we want to have control over
their input and outputs since we have two inputs and outputs and only one mother
process &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;. In order to avoid the two outputs becoming
interleaved and two know what input to send to which child process we&amp;rsquo;re going
to have to do something clever&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;non-blocking-outputs-the-power-of-threads:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Non-blocking Outputs: The Power of Threads&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start with output. Our basic strategy is going to be read a line from a
subprocess and pass through to the mother process&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt;, prepended with an
&lt;code&gt;A:&lt;/code&gt; if it came from procedure &lt;code&gt;A&lt;/code&gt; and a &lt;code&gt;B:&lt;/code&gt; if it came from procedure &lt;code&gt;B&lt;/code&gt;.
However, there&amp;rsquo;s a snag, and that snag is that the &lt;code&gt;read()&lt;/code&gt; method of Python&amp;rsquo;s
file object is blocking: if our mother process is waiting to read from the
&lt;code&gt;stdout&lt;/code&gt; of &lt;code&gt;B&lt;/code&gt; and no output is produced from &lt;code&gt;B&lt;/code&gt;, then our mother process will
just wait as long as it takes for some output to turn up. If no end of
interesting output is coming from &lt;code&gt;A&lt;/code&gt; it makes no odds, it just has to wait.&lt;/p&gt;

&lt;p&gt;What we need is a way of doing two things at once: reading from &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;
simultaneously and putting a line from &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; to the mother process&amp;rsquo;s
&lt;code&gt;stdout&lt;/code&gt; whenever one appears. Luckily, Python has a way of doing two things at
once: the &lt;a href=&#34;https://docs.python.org/2/library/threading.html&#34;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt;
module.&lt;/p&gt;

&lt;p&gt;A thread, if you didn&amp;rsquo;t know, is a lightweight separate thread of execution that
shares the same memory space as the spawning thread. You make one in Python by
calling the &lt;code&gt;Thread&lt;/code&gt; constructor with a call something like this:
&lt;code&gt;threading.Thread(target=function, args=(arg1, arg2))&lt;/code&gt;. The argument &lt;code&gt;target&lt;/code&gt; is
the function that the thread will start at when the thread is started, and
&lt;code&gt;args&lt;/code&gt; is a tuple containing the arguments that will be passed to this function.&lt;/p&gt;

&lt;p&gt;A thread is started by calling its &lt;code&gt;start()&lt;/code&gt; method, at which point the function
&lt;code&gt;target&lt;/code&gt; will be called in a separate thread of execution, running in parallel
to the spawning thread, and any other threads.&lt;/p&gt;

&lt;p&gt;To get an idea of how threads work, take a look at this example program:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# simple_threading_eg.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;random&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_fn&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b):&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# pause a random number of seconds before doing anything else&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(random&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;random())&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{0} {1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b)&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;# make 4 threads, which will all end up calling the same function&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# (but will pass different arguments to it)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;john&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;george&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ringo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# making a thread a `daemon` means that when the main process&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# ends the thread will end too&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start the threads running&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# wait for all the child threads to terminate before ending&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;communicating-between-threads:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Communicating Between Threads&lt;/h2&gt;

&lt;p&gt;This example creates four threads, all calling the same simple function with
different arguments. The &lt;code&gt;target&lt;/code&gt; function is set up to sleep for a random
number of seconds before printing the arguments it was passed.&lt;/p&gt;

&lt;p&gt;When one of our threads reading a process&amp;rsquo;s output gets some output, we need to
pass that output back to our main thread in order to do some post processing and
print it. How do we do that with threads?&lt;/p&gt;

&lt;p&gt;There is a Python module called
&lt;a href=&#34;https://docs.python.org/2/library/queue.html#Queue.Queue&#34;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; that
implements a thread-safe queue, one thread can put objects on a queue and
another thread can pop objects off, safe in the knowledge that these things are
safe despite the fact that they may be happening simultaneously.&lt;/p&gt;

&lt;p&gt;A queue is created with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;objects (in this case the variable &lt;code&gt;a&lt;/code&gt;) are placed on it with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and read off in a non-blocking way with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# b will now have the value &amp;#39;5&amp;#39; &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A simple example is given below, building on the simple introduction to threads
that was introduced before. In this case, the string that the &lt;code&gt;test_fn&lt;/code&gt; produces
after a random period of time is put on a queue. The main thread has an infinite
loop that keeps checking if anything is on the queue, and it is the main thread
which does the printing if something is found:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# simple_threading_queue_eg.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;random&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_fn&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# pause a random number of seconds before doing anything else&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(random&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;random())&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# put a message on the queue&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{0} {1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b))&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# make 4 threads, which will all end up calling the same function&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# (but will pass different arguments to it)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;john&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;george&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ringo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# making a thread a `daemon` means that when the main process&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# ends the thread will end too&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start the threads running&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# if there is any message on the queue, print it.&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# if the queue is empty, the exception will be caught&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# and the queue polled again in a moment&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;implementing-non-blocking-output:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Implementing Non-Blocking Output&lt;/h2&gt;

&lt;p&gt;That last example came very close to having the functionality we desired of our
non-blocking output. We now need to take the principles explored in
&lt;code&gt;simple_threading_queue_eg.py&lt;/code&gt; and apply them to putting output from process A
and B&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt; onto a queue, rather than just any old string.&lt;/p&gt;

&lt;p&gt;We want the target function of our output reading threads to keep attempting to
read from their target pipes, whenever they manage to read a whole line of
something we want them to put this line onto a queue:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_output&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads output from `pipe`, when line has been read, puts&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;line on Queue `q`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(l)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A thread that reads from the &lt;code&gt;stdout&lt;/code&gt; of procedure &lt;code&gt;A&lt;/code&gt; and put any output it
finds into a queue, &lt;code&gt;pa_q&lt;/code&gt; can be started like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# queue for storing output lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of thread to read output from procedures A&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;with a similar sequence needed for procedure &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With these threads busily running in the background, putting any output they get
onto a queue named &lt;code&gt;pa_q&lt;/code&gt; for process &lt;code&gt;A&lt;/code&gt;, or &lt;code&gt;pb_q&lt;/code&gt; for &lt;code&gt;B&lt;/code&gt;, we want our main
thread to loop, periodically checking the queues to see if process &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; has
produced any output. Upon finding some, we just prepend the letter of the
producing process and print the message:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure A (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure B (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that should be it! Putting this all together into a working script:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# two_subprocesses_with_output.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_output&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads output from `pipe`, when line has been read, puts&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;line on Queue `q`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(l)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start both `proc_a.py` and `proc_b.py`&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# queues for storing output lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of threads to read output from procedures A and B&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# check if either sub-process has finished&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure A (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure B (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Running this will result in the output of both sub procedures being multiplexed
and printed out together:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;non-blocking-input:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Non-blocking Input&lt;/h2&gt;

&lt;p&gt;The way we want input for our test harness to work is like this, we want to have
two named pipes in the file system, &lt;code&gt;proc_a_input&lt;/code&gt; and &lt;code&gt;proc_b_input&lt;/code&gt;, for which
attempts are constantly made to open and read from them. Whenever anything is
read from either it can be passed directly to the &lt;code&gt;stdin&lt;/code&gt; of the appropriate
process.&lt;/p&gt;

&lt;p&gt;This case is actually a little simpler than the output case, since we don&amp;rsquo;t have
to make any communication back to the main thread.&lt;/p&gt;

&lt;p&gt;The target function of our input threads will look like what we had in
&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes#external_pipe_say_my_name_constant&#34;&gt;external_pipe_say_my_name_constant.py&lt;/a&gt;,
i.e.:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_input&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(write_pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in_pipe_name):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads input from a pipe with name `read_pipe_name`,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;writing this input straight into `write_pipe`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(in_pipe_name,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;write_pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;write_pipe&lt;/code&gt; will be the &lt;code&gt;stdin&lt;/code&gt; of our processes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, and
&lt;code&gt;in_pipe_name&lt;/code&gt; will be the name of the external pipes in our file system,
&lt;code&gt;proc_a_input&lt;/code&gt; and &lt;code&gt;proc_b_input&lt;/code&gt;. For procedure &lt;code&gt;A&lt;/code&gt;, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# start a thread to read input into procedure A&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a_input&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;With everything mashed together you&amp;rsquo;ll get a program like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# two_subprocesses_with_output_and_input.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_output&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads output from `pipe`, when line has been read, puts&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;line on Queue `q`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(l)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_input&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(write_pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in_pipe_name):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads input from a pipe with name `read_pipe_name`,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;writing this input straight into `write_pipe`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(in_pipe_name,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;write_pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start both `proc_a.py` and `proc_b.py`&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# lists for storing the lines of output generated&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_line_buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_line_buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; 

&lt;span style=&#34;color: #75715e&#34;&gt;# queues for storing output lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of threads to read output from procedures A and B&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of threads to read input into procedures A and B&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a_input&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_input_thread&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b_input&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# check if either sub-process has finished&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure A (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure B (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;running-the-suite:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Running the Suite&lt;/h2&gt;

&lt;p&gt;Now all that is left to do is give the suite a test-drive an check that it
works. In the same directory that you&amp;rsquo;re going to be running the script make
sure you&amp;rsquo;ve got two named pipes &lt;code&gt;proc_a_input&lt;/code&gt; and &lt;code&gt;proc_b_input&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a_input&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b_input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;then you can run &lt;code&gt;two_subprocesses_with_output_and_input.py&lt;/code&gt;. In another
terminal, by piping input into &lt;code&gt;proc_a_input&lt;/code&gt; or &lt;code&gt;proc_b_input&lt;/code&gt; you should see
the consequences of that input reflected in the output of the suite, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hi&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;there&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a_input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;in another terminal should give you the output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;says,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hi there&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and following this with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hi&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b_input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will give you the output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;says,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hi there&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;says,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hi from b&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Naturally this is a simple example, but if you are trying to test a
server-client architecture it can be very powerful and labour saving.
Since all the output goes through the main thread, you can check that your
server and client are in appropriate states before handing interactive control
over to the user.&lt;/p&gt;

&lt;p&gt;As an illustration, I needed to prompt my client to send a couple of messages to
the server before I wanted to do interactive testing. This was a trivial task of
sending the appropriate messages through the client&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; and checking for
the correct responses from the server&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt; before starting the threaded
input and the event loop of the main process.&lt;/p&gt;

&lt;p&gt;I hope this exploration of Python pipes and subprocesses will save you a similar
amount of time in the future!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 5: Subprocesses and Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:44:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/</guid>
      <description>

&lt;p&gt;The Python &lt;a href=&#34;https://docs.python.org/2/library/subprocess.html&#34;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt;
module (used for starting subprocesses) is one module that provides scope for
heavy usage of pipes. Here we&amp;rsquo;ll look at this module and how you can use pipes
to manipulate the input and output of the spawned subprocess.&lt;/p&gt;

&lt;h2 id=&#34;a-crash-course-in-the-subprocess-module:1956c9ac1946b782115d32b1112a1769&#34;&gt;A Crash Course in the subprocess Module&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s have a program, for example the Python program detailed below that queries
a person for their name and then echos it with a greeting (note this example is
a Python program, but we can, in principle, use any program)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what&amp;#39;s your name?&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name[:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Well how do you do {0}?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(name)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what&amp;#39;s your name?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program can be started from within a separate Python process by using the
&lt;code&gt;subprocess&lt;/code&gt; module, like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# run_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt; creates a &lt;code&gt;Popen&lt;/code&gt; object and kicks off a subprocess similar
to the one that would be started by typing &lt;code&gt;python say_my_name.py&lt;/code&gt; at a command
prompt. The subsequent &lt;code&gt;while&lt;/code&gt; loop repeatedly polls the &lt;code&gt;Popen&lt;/code&gt; object, and
makes sure that the &lt;code&gt;returncode&lt;/code&gt; attribute is changed from being &lt;code&gt;None&lt;/code&gt; when the
child process terminates, at which point the mother process will quickly also
terminate.&lt;/p&gt;

&lt;p&gt;By default, the &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; of the child process are set to be the same
as the &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; of the mother, meaning that &lt;code&gt;say_my_name.py&lt;/code&gt;
operates much as before. Next, we&amp;rsquo;ll work at changing the &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;
of the child and exploring what possibilities this uncovers.&lt;/p&gt;

&lt;h2 id=&#34;controlling-the-input-and-output:1956c9ac1946b782115d32b1112a1769&#34;&gt;Controlling the Input and Output&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt; can take two optional named arguments, &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;,
that set the pipes that the child process uses as its &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;. By
passing the constant &lt;code&gt;subprocess.PIPE&lt;/code&gt; as either of them you specify that you
want the resultant &lt;code&gt;Popen&lt;/code&gt; object to have control of child proccess&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt;
and/or &lt;code&gt;stdout&lt;/code&gt;, through the &lt;code&gt;Popen&lt;/code&gt;&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;In the next example, three names are passed to the &lt;code&gt;say_my_name.py&lt;/code&gt; child
process before the &lt;code&gt;EOF&lt;/code&gt; signal is sent to the child&amp;rsquo;s input. The mother process
then waits for the child to finish, before reading whatever output the child
produced and printing it with a small piece of text prepended:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# internal_pipe_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;matthew&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mark&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;luke&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I got back from the program this:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;{0}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is easy to see how to extrapolate from this small program to develop an
end-to-end testing suite, starting a program,  passing it in some input and
checking that the output that is received is that expected. But what to if you
want a mix of scripted input and user input, say for a testing program when you
wish to get the test subject into a certain state before allowing interactive
input? That&amp;rsquo;s what we&amp;rsquo;ll look at next.&lt;/p&gt;

&lt;h2 id=&#34;mixing-scripted-and-interactive-input:1956c9ac1946b782115d32b1112a1769&#34;&gt;Mixing Scripted and Interactive Input&lt;/h2&gt;

&lt;p&gt;To expose the subprocess to a certain amount of scripted input, before reverting
to giving the subprocess input from &lt;code&gt;stdin&lt;/code&gt;, we have to set up the subprocess to
accept input from a pipe, hand it our scripted input and then manually code to
read from the mother process&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; passing whatever we read to the child&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# mixed_input_pipe_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;matthew&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mark&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;luke&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(i)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;so this code will provide the names &amp;lsquo;matthew&amp;rsquo;, &amp;lsquo;mark&amp;rsquo; and &amp;lsquo;luke&amp;rsquo; to the
subprocess before switching to reading every byte from &lt;code&gt;stdin&lt;/code&gt;. When &lt;code&gt;sys.stdin&lt;/code&gt;
returns an empty string (&amp;ldquo;), that indicates that &lt;code&gt;stdin&lt;/code&gt; has closed so we can
close the &lt;code&gt;stdin&lt;/code&gt; of the child process and clean up.&lt;/p&gt;

&lt;h2 id=&#34;using-external-pipes:1956c9ac1946b782115d32b1112a1769&#34;&gt;Using External Pipes&lt;/h2&gt;

&lt;p&gt;Another interesting trick with subprocesses that you might want to use from time
to time (we&amp;rsquo;ll use it in the next section, in fact) is taking &lt;code&gt;stdin&lt;/code&gt; and
&lt;code&gt;stdout&lt;/code&gt; for the subprocess from a couple of external pipes. To do this we&amp;rsquo;ll
first need to create a couple of pipes in our working directory where we will
pipe the input into and read the output out of:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Once these two pipes exist, our first stab at using external pipes with a
subprocess takes the following course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open the &lt;code&gt;input_pipe&lt;/code&gt; (for reading) and &lt;code&gt;output_pipe&lt;/code&gt; (for writing)&lt;/li&gt;
&lt;li&gt;start the subprocess, with &lt;code&gt;stdin&lt;/code&gt; being &lt;code&gt;input_pipe&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; being
&lt;code&gt;output_pipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;keep polling the subprocess until it returns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in code this looks like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# external_pipe_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;input_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe)&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To test this out, we start &lt;code&gt;external_pipe_say_my_name.py&lt;/code&gt; in one virtual
terminal. In another we pipe some input to &lt;code&gt;input_pipe&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;john&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;then, when we read from &lt;code&gt;output_pipe&lt;/code&gt; in a third, say with &lt;code&gt;cat output_pipe&lt;/code&gt;,
we retrieve the output of the &lt;code&gt;say_my_name.py&lt;/code&gt; subprocess.&lt;/p&gt;

&lt;p&gt;There is a small problem with this though, that being that once &lt;code&gt;echo john &amp;gt;
input_pipe&lt;/code&gt; returns and closes the pipe, sending &lt;code&gt;EOF&lt;/code&gt;, the child process closes
and so does the mother process. What we might like to be able to do is keep
piping names to &lt;code&gt;input_pipe&lt;/code&gt; and have our mother process keep reading them and
passing them on to its child, without the child finishing.&lt;/p&gt;

&lt;p&gt;Achieving this involves a slightly different flow from the one described
previously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open the &lt;code&gt;output_pipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start the subprocess, using &lt;code&gt;output_pipe&lt;/code&gt; as the output pipe and an internal
pipe as &lt;code&gt;stdin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;keep polling for the end of the child process&lt;/li&gt;
&lt;li&gt;try and open &lt;code&gt;input_pipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;write to the child&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; what you read from the pipe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in code this looks like:&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;external_pipe_say_my_name_constant&#34;&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# external_pipe_say_my_name_constant.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;input_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(input_pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;to test this, we start &lt;code&gt;external_pipe_say_my_name_constant.py&lt;/code&gt; in one virtual
terminal, start reading from &lt;code&gt;output_pipe&lt;/code&gt; with &lt;code&gt;cat output_pipe&lt;/code&gt; and in a third
terminal we can write to the input repeatedly with commands such as &lt;code&gt;echo greg &amp;gt;
input_pipe&lt;/code&gt;, noting that the output is successfully deposited in the
&lt;code&gt;output_pipe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One subtlety that you might have noticed is that the command used to start the
subprocess is &lt;code&gt;stdbuf -o0 python say_my_name.py&lt;/code&gt; as opposed to the usual
&lt;code&gt;python say_my_name.py&lt;/code&gt;, what does this mysterious &lt;code&gt;stdbuf -o0&lt;/code&gt; do?&lt;/p&gt;

&lt;p&gt;A quick read of the flipping manual will tell you that this command turns off
buffering for &lt;code&gt;stdout&lt;/code&gt; stream. This is necessary because by default Linux
buffers &lt;code&gt;stdout&lt;/code&gt; through a pipe. What this means in our case is that
&lt;code&gt;say_my_name.py&lt;/code&gt; will receive the names we input, and will process them and
produce an output, but this output will be buffered and not sent on immediately
to the mother process, meaning that when we view the output we see nothing
(at least until the buffer is filled). Try taking away that &lt;code&gt;stdbuf&lt;/code&gt; argument
from the call to &lt;code&gt;Popen&lt;/code&gt; and see what happens for yourself (the answer is not
much).&lt;/p&gt;

&lt;p&gt;By now we&amp;rsquo;ve just about dealt with every permutation of putting stuff in pipes
from various sources and passing it to a sub-process, we&amp;rsquo;re ready for a final
step, a piece de resistance, a program that spawns two subprocesses and allows
the user to send input/read output from both. But that&amp;rsquo;s for the &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/&#34;&gt;next
section&amp;hellip;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 4: On the Buffers</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers/</link>
      <pubDate>Thu, 02 Mar 2017 23:43:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers/</guid>
      <description>

&lt;p&gt;In the last section we looked at sending a message through a pipe and everything
worked great.  However there was a porblem, and this becomes apparent if we
alter the sending program and make it run a little slower, perhaps by adding a
short sleep in between sending each letter of the message, something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if we run this program and attempt to read from &lt;code&gt;my_pipe&lt;/code&gt; in a different virtual
terminal with &lt;code&gt;cat my_pipe&lt;/code&gt; we&amp;rsquo;ll see that we need to show a bit of patience!
The terminal running the Python process will periodically print reassuring
messages saying it has sent letters, and yet we&amp;rsquo;ll see no letters shown on the
virtual terminal running &lt;code&gt;cat my_pipe&lt;/code&gt;, at least not until the end of the
message is reached, at which point the whole message will suddenly appear.&lt;/p&gt;

&lt;h2 id=&#34;unbuffered-writing:c66f5d5419b8a26a1cc7c3e102ecb685&#34;&gt;Unbuffered Writing&lt;/h2&gt;

&lt;p&gt;The root of this problem is buffering &amp;ndash; rather than being sent straight through
the pipe, Python&amp;rsquo;s IO, by default, buffers the data, and this data is not
flushed until the &lt;code&gt;EOF&lt;/code&gt; (end of file) signal is encountered.&lt;/p&gt;

&lt;p&gt;Looking at the manual page for Python&amp;rsquo;s
&lt;a href=&#34;https://docs.python.org/2/library/functions.html#open&#34;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; function we see
that there is a way to control the size of this buffer, through the &lt;code&gt;buffering&lt;/code&gt;
argument. &lt;code&gt;buffering&lt;/code&gt; has a special meaning when it is set equal to 0, where
no buffering is done at all. Altering our slow write to have &lt;code&gt;buffering = 0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;write_to_pipe_buf_0&#34;&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# write_to_pipe_buf_0.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and running again, while attempting to read again with &lt;code&gt;cat my_pipe&lt;/code&gt; in another
virtual terminal, we can see the effect of altering the buffering; each letter
gets shown one at a time.&lt;/p&gt;

&lt;p&gt;The manual page for
&lt;a href=&#34;https://docs.python.org/2/library/functions.html#open&#34;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; also mentions a
special value of &lt;code&gt;buffering = 1&lt;/code&gt;, which is line buffered. This does what its
name implies, as can be seen by running this program, which has our message
broken down into lines, while reading from a pipe:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# write_to_pipe_buf_1.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;to a&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other values of &lt;code&gt;buffering&lt;/code&gt; change the size of the chunks in which the data is
sent across the pipe, see for example what effect a &lt;code&gt;buffering&lt;/code&gt; of &lt;code&gt;4&lt;/code&gt; has on
this program:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# write_to_pipe_buf_4.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This program sends the message across the pipe in chunks of approximately 4
bytes.&lt;/p&gt;

&lt;h2 id=&#34;unbuffered-reading:c66f5d5419b8a26a1cc7c3e102ecb685&#34;&gt;Unbuffered Reading&lt;/h2&gt;

&lt;p&gt;The natural counterpart to a Python program that does unbuffered writing is one
that does unbuffered reading, so let&amp;rsquo;s write one now.&lt;/p&gt;

&lt;p&gt;Firstly, trying our previous program for reading from a pipe,
&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python#read_from_pipe&#34;&gt;&lt;code&gt;read_from_pipe.py&lt;/code&gt;&lt;/a&gt;,
(by running &lt;a href=&#34;#write_to_pipe_buf_0&#34;&gt;&lt;code&gt;write_to_pipe_buf_0.py&lt;/code&gt;&lt;/a&gt; in one virtual
terminal, and
&lt;a href=&#34;https://lyceum-allotments.github.io/2016/11/python-and-pipes-part-3-pipes-in-python#read_from_pipe&#34;&gt;&lt;code&gt;read_from_pipe.py&lt;/code&gt;&lt;/a&gt;
in another)
we see that it doesn&amp;rsquo;t display the message being received letter by letter, but
that it instead blocks, the problem being that the iterator through the pipe&amp;rsquo;s
&lt;code&gt;FILE&lt;/code&gt; object, &lt;code&gt;for l in f&lt;/code&gt;, doesn&amp;rsquo;t commence until &lt;code&gt;f&lt;/code&gt; has reached the &lt;code&gt;EOF&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To read just a set number of bytes from a &lt;code&gt;file&lt;/code&gt; object we need to try a
slightly different approach, using the
&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#file.read&#34;&gt;&lt;code&gt;f.read(x)&lt;/code&gt;&lt;/a&gt;
method which blocks until it reads &lt;code&gt;x&lt;/code&gt; bytes from &lt;code&gt;f&lt;/code&gt; or reaches &lt;code&gt;EOF&lt;/code&gt;,
returning either a string of the data used or &lt;code&gt;None&lt;/code&gt;, if the &lt;code&gt;file&lt;/code&gt; object is
finished.&lt;/p&gt;

&lt;p&gt;Feeling our way towards solving the problem, a program like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;bufsize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(bufsize)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will read from 1 character from the pipe, print it and then the Python program
finishes. When we run it with &lt;a href=&#34;#write_to_pipe_buf_0&#34;&gt;&lt;code&gt;write_pipe_buf_0.py&lt;/code&gt;&lt;/a&gt;
we get the first character of the message printed as soon as it is available in
the pipe. Increasing &lt;code&gt;bufsize&lt;/code&gt; we see that we can alter the number of characters
that are printed,
&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#file.read&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; blocking
until that many characters have been sent to the pipe.&lt;/p&gt;

&lt;p&gt;Another bit of behaviour that should be noted is that when the process reading
from the pipe closes before the message being written has finshed being written
the writing process crashes, throwing an
&lt;a href=&#34;(https://docs.python.org/2/library/stdtypes.html#file.read&#34;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;
exception complaining of a broken pipe. We won&amp;rsquo;t concern ourselves with that
here.&lt;/p&gt;

&lt;p&gt;If we want to read a message through a pipe letter by letter, then, we need to
loop, reading a character and, whenever one is available, printing it and waiting
for the next character. We break from the loop whenever &lt;code&gt;read&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;,
i.e. when the message has ended. In short, something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c,&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The only problem with this is it doesn&amp;rsquo;t work! Once again the message won&amp;rsquo;t
display until it has completely sent and the pipe closed. The problem this time
is write-buffered IO at the operating system level. When writing to &lt;code&gt;stdout&lt;/code&gt; (as
&lt;code&gt;print&lt;/code&gt; does) the output is buffered, i.e. will only display when enough
characters have been printed. Once again the message won&amp;rsquo;t display until it has
completely sent and the pipe closed. The problem this time is write-buffered IO
at the operating system level. When writing to &lt;code&gt;stdout&lt;/code&gt; (as &lt;code&gt;print&lt;/code&gt; does) the
output is buffered, i.e. will only display when enough characters have been
printed.&lt;/p&gt;

&lt;p&gt;To circumvent this we need to go a little lower level and use Python&amp;rsquo;s &lt;code&gt;sys&lt;/code&gt;
module.
&lt;a href=&#34;https://docs.python.org/2/library/sys.html?highlight=sys%20module#sys.stdout&#34;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt;
is a &lt;code&gt;file&lt;/code&gt; object that represents Unix&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt; pipe, i.e. the pipe that when
written to gets displayed on the screen.&lt;/p&gt;

&lt;p&gt;Doing something like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;flush()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will write a string to &lt;code&gt;stdout&lt;/code&gt; and then flush it, i.e. force what&amp;rsquo;s been
written to be displayed on the screen. With this in mind by changing our
unbuffered reading program to this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;flush()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and running this in concert with &lt;a href=&#34;#write_to_pipe_buf_0&#34;&gt;&lt;code&gt;write_pipe_buf_0.py&lt;/code&gt;&lt;/a&gt;
in another buffer we see that it works how we want, the message is displayed
letter by letter, as it is received!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 3: Pipes in Python</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python/</link>
      <pubDate>Thu, 02 Mar 2017 23:42:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/&#34;&gt;previous
section&lt;/a&gt; it was
shown how pipes were represented in the operating system in Unix, and how they
were written and read from in a way that was very much analagous to how ordinary
files are. This is one of the major insights of the Unix family of operating
systems, they make explicit the analogies between interprocess communication and
ordinary input and output &amp;ndash; if a program is made to operate based on the input
of plain text and produce plain text as an output it does not matter about the
origins of that input, be it a human with a keyboard, another program or even
input travelling from across the world over the internet.&lt;/p&gt;

&lt;p&gt;It should come as no surprise that Python continues in this happy tradition,
treating named pipes in much the same way as files.&lt;/p&gt;

&lt;h2 id=&#34;writing-to-pipes-in-python:06e457c8c20e32f75e7fe39c94852657&#34;&gt;Writing to Pipes in Python&lt;/h2&gt;

&lt;p&gt;Here is a Python program for writing a short string of text to a file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_file&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened file, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a file&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and here is how we would read the contents of that file from a virtual console:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The equivalent program for writing to our pipe &lt;code&gt;my_pipe&lt;/code&gt; is fundamentally
exactly the same,&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello through a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;a quick&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will read the contents of the pipe in a way exactly analagous to a file.&lt;/p&gt;

&lt;p&gt;One thing worth noting is that the message, &amp;ldquo;have opened pipe, commencing
writing&amp;rdquo; does not get displayed until we open the other end of the pipe for
reading &amp;ndash; the call to &lt;code&gt;open&lt;/code&gt; in Python is blocking until the pipe has got an
end to be written to.&lt;/p&gt;

&lt;h2 id=&#34;reading-from-pipes-in-python:06e457c8c20e32f75e7fe39c94852657&#34;&gt;Reading from Pipes in Python&lt;/h2&gt;

&lt;p&gt;Reading from pipes is also exactly analagous to reading from a pipe:&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;read_from_pipe&#34;&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# read_from_pipe.py&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;l,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;by running &lt;code&gt;write_to_pipe.py&lt;/code&gt; in one virtual console and &lt;code&gt;read_from_pipe.py&lt;/code&gt; in
another we recover the same behaviour as we observed in using &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt;
before. Indeed we can run the read and write and the opposite order, and see
that this time it&amp;rsquo;s the call to &lt;code&gt;open&lt;/code&gt; in the read program that blocks, until
the write program is ran and opens the other end of the pipe.&lt;/p&gt;

&lt;p&gt;In the next section we look a bit more at the subtleties around these
operations, specifically the subtleties around &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers&#34;&gt;buffering&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 2: Introduction to Unix Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:41:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/</guid>
      <description>&lt;p&gt;Pipes are one method of interprocess communication in the Unix world, the other
being sockets. The differences are that pipes are more simple to set up and use
but more narrow in scope. Pipes are unidirectional, having one writer and one
reader, and operate on a &amp;lsquo;first in first out&amp;rsquo; (or FIFO) principle &amp;ndash; i.e. the
first bit of data you put in is the first you get out; if I put &amp;lsquo;hello world&amp;rsquo;
into a pipe I will receive a &amp;lsquo;h&amp;rsquo; first and the &amp;rsquo;d&amp;rsquo; last.&lt;/p&gt;

&lt;p&gt;Using the Unix shell it&amp;rsquo;s simple to see how pipes work. Just open two virtual
consoles and change directory so that you are in the same directory in both of
them. Make a named pipe by using the command&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will make a pipe with the name &lt;code&gt;my_pipe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Listing the contents of your directory with &lt;code&gt;ls -l&lt;/code&gt; you will see &lt;code&gt;my_pipe&lt;/code&gt;
listed in the directory just like a normal file, only it will have the letter
&lt;code&gt;p&lt;/code&gt; preceding its permissions:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;prw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Nov&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can redirect the output of any program to &lt;code&gt;my_pipe&lt;/code&gt; in just the same way as
you would redirect it to a file, a litle something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello through a pipe&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the other virtual terminal you can access the contents of the pipe in a
similar way to reading the contents of a file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and you should see &amp;ldquo;hello through a pipe&amp;rdquo; printed onto the screen.&lt;/p&gt;

&lt;p&gt;Note also that the &lt;code&gt;echo&lt;/code&gt; command blocked until you read from the pipe. As an
experiment, try things the other way round; &lt;code&gt;cat my_pipe&lt;/code&gt; will now block until
you write something into the pipe with, say, &lt;code&gt;echo &amp;quot;hello through a pipe&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully this short introduction will have illustrated to you how simple yet
effective Unix pipes can be, named pipes look and behave in many ways just like
a file and so make interprocess communication as simple as reading/writing from
files. The &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python&#34;&gt;next section&lt;/a&gt; will go on to discuss how these pipes can be used from
Python.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:40:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working a bit with pipes in Python, using the
&lt;a href=&#34;https://docs.python.org/2/library/subprocess.html&#34;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module to
kick off a couple of processes, a client and a server, and using pipes to
redirect their input and output in such a way as to test them. I thought it
might be an idea to write about using pipes primarily from a Python viewpoint,
with a view especially to clarifying things like blocking and buffering.&lt;/p&gt;

&lt;p&gt;In the course of this tutorial we will develop a testing tool for a pair of
programs. This tool will be able to start both programs, issue some commands to
both of them and then source its input from named pipes, allowing the user to
enter their own commands as and when they see fit. The output will be provided
via &lt;code&gt;stdout&lt;/code&gt; and will be the multiplexed output of both prgrams, prefixed with
an appropriate identifying prefix. A typical use case of this testing tool (and
what I am using it for) is testing a client and server, by which I need to fire
up both client and server, automate the entry of some configuration commands
and then have manual control to enter more commands to both client and server.&lt;/p&gt;

&lt;p&gt;The tutorial is broken into the following pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/&#34;&gt;&lt;strong&gt;Introduction to Unix Pipes&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; a brief introduction to Unix named pipes in general, and how to use them&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python/&#34;&gt;&lt;strong&gt;Pipes in Python&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; Python is used to write and read from pipes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers/&#34;&gt;&lt;strong&gt;On the Buffers&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; looking at the effect of buffering in reading and writing from pipes, writing
a program that sends a message letter by letter and line by line&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/&#34;&gt;&lt;strong&gt;Subrocesses and pipes&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; where a subprocess is spawned in Python and the input and output redirected
and manipulated to our heart&amp;rsquo;s content&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/&#34;&gt;&lt;strong&gt;Multiple subprocesses and pipes&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; the fully-fledged testing tool is developed, a program that spawns two
subprocesses, and redirects the inputs and outputs to four pipes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>