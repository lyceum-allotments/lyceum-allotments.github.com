<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on The Lyceum Allotments</title>
    <link>https://lyceum-allotments.github.io/post/</link>
    <description>Recent content in Posts on The Lyceum Allotments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Mar 2017 23:46:37 +0000</lastBuildDate>
    <atom:link href="https://lyceum-allotments.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python and Pipes Part 6: Multiple Subprocesses and Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:46:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/&#34;&gt;previous
section&lt;/a&gt;
we explored start a subprocess and controlling its input and output via
pipes. In this section we&amp;rsquo;ll do the same, but this time for two sub-processes.
A use for this, and the original reason I first developed this, was for testing
a client and server. Basically, I wanted a program to start up the client and
the server, to provide a set of pre-scripted commands to each to get them in a
certain state, and then a way of providing my own custom commands, to do some
interactive testing.&lt;/p&gt;

&lt;p&gt;What we aim to end up with is a program that starts up two sub-processes, let&amp;rsquo;s
call them &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, and connects to two named pipes in the file system. From
these two pipes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; will read their respective inputs. Output from both
of the processes will be printed on &lt;code&gt;stdout&lt;/code&gt;, but to enable us to differentiate
which output comes from which process we&amp;rsquo;ll prepend output from process &lt;code&gt;A&lt;/code&gt; with
an &lt;code&gt;A:&lt;/code&gt; and from process &lt;code&gt;B&lt;/code&gt; with a &lt;code&gt;B:&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;the-two-sub-processes:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;The Two Sub-Processes&lt;/h2&gt;

&lt;p&gt;As an illustration of what can be achieved, the two sub-processes that we are
going to spawn will be kept very simple, doing nothing more than printing a
prompt, reading a line of input, echoing that back and prompting for more input:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# proc_a.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc A say?&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name[:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Proc A says, &lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(name)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc A say?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# proc_b.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc B say?&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name[:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Proc B says, &lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(name)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what should proc B say?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A program to start both of these sub-processes and run them until
either of them, or the mother process, finishes, looks pretty similar
to the stuff we were doing with sub-processes in the previous section:
all we have to do is two start two subprocesses rather than one and make
sure we poll and check two return codes rather than one:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# two_subprocesses.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start both `proc_a.py` and `proc_b.py`&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# check if either sub-process has finished&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that both our subprocesses are opened with their &lt;code&gt;stdin&lt;/code&gt;s and &lt;code&gt;stdout&lt;/code&gt;s
from internal pipes. This is necessary because we want to have control over
their input and outputs since we have two inputs and outputs and only one mother
process &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;. In order to avoid the two outputs becoming
interleaved and two know what input to send to which child process we&amp;rsquo;re going
to have to do something clever&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;non-blocking-outputs-the-power-of-threads:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Non-blocking Outputs: The Power of Threads&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll start with output. Our basic strategy is going to be read a line from a
subprocess and pass through to the mother process&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt;, prepended with an
&lt;code&gt;A:&lt;/code&gt; if it came from procedure &lt;code&gt;A&lt;/code&gt; and a &lt;code&gt;B:&lt;/code&gt; if it came from procedure &lt;code&gt;B&lt;/code&gt;.
However, there&amp;rsquo;s a snag, and that snag is that the &lt;code&gt;read()&lt;/code&gt; method of Python&amp;rsquo;s
file object is blocking: if our mother process is waiting to read from the
&lt;code&gt;stdout&lt;/code&gt; of &lt;code&gt;B&lt;/code&gt; and no output is produced from &lt;code&gt;B&lt;/code&gt;, then our mother process will
just wait as long as it takes for some output to turn up. If no end of
interesting output is coming from &lt;code&gt;A&lt;/code&gt; it makes no odds, it just has to wait.&lt;/p&gt;

&lt;p&gt;What we need is a way of doing two things at once: reading from &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;
simultaneously and putting a line from &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; to the mother process&amp;rsquo;s
&lt;code&gt;stdout&lt;/code&gt; whenever one appears. Luckily, Python has a way of doing two things at
once: the &lt;a href=&#34;https://docs.python.org/2/library/threading.html&#34;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt;
module.&lt;/p&gt;

&lt;p&gt;A thread, if you didn&amp;rsquo;t know, is a lightweight separate thread of execution that
shares the same memory space as the spawning thread. You make one in Python by
calling the &lt;code&gt;Thread&lt;/code&gt; constructor with a call something like this:
&lt;code&gt;threading.Thread(target=function, args=(arg1, arg2))&lt;/code&gt;. The argument &lt;code&gt;target&lt;/code&gt; is
the function that the thread will start at when the thread is started, and
&lt;code&gt;args&lt;/code&gt; is a tuple containing the arguments that will be passed to this function.&lt;/p&gt;

&lt;p&gt;A thread is started by calling its &lt;code&gt;start()&lt;/code&gt; method, at which point the function
&lt;code&gt;target&lt;/code&gt; will be called in a separate thread of execution, running in parallel
to the spawning thread, and any other threads.&lt;/p&gt;

&lt;p&gt;To get an idea of how threads work, take a look at this example program:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# simple_threading_eg.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;random&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_fn&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b):&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# pause a random number of seconds before doing anything else&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(random&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;random())&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{0} {1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b)&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;# make 4 threads, which will all end up calling the same function&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# (but will pass different arguments to it)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;john&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;george&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ringo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# making a thread a `daemon` means that when the main process&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# ends the thread will end too&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start the threads running&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# wait for all the child threads to terminate before ending&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;communicating-between-threads:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Communicating Between Threads&lt;/h2&gt;

&lt;p&gt;This example creates four threads, all calling the same simple function with
different arguments. The &lt;code&gt;target&lt;/code&gt; function is set up to sleep for a random
number of seconds before printing the arguments it was passed.&lt;/p&gt;

&lt;p&gt;When one of our threads reading a process&amp;rsquo;s output gets some output, we need to
pass that output back to our main thread in order to do some post processing and
print it. How do we do that with threads?&lt;/p&gt;

&lt;p&gt;There is a Python module called
&lt;a href=&#34;https://docs.python.org/2/library/queue.html#Queue.Queue&#34;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; that
implements a thread-safe queue, one thread can put objects on a queue and
another thread can pop objects off, safe in the knowledge that these things are
safe despite the fact that they may be happening simultaneously.&lt;/p&gt;

&lt;p&gt;A queue is created with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;objects (in this case the variable &lt;code&gt;a&lt;/code&gt;) are placed on it with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(a)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and read off in a non-blocking way with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# b will now have the value &amp;#39;5&amp;#39; &lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A simple example is given below, building on the simple introduction to threads
that was introduced before. In this case, the string that the &lt;code&gt;test_fn&lt;/code&gt; produces
after a random period of time is put on a queue. The main thread has an infinite
loop that keeps checking if anything is on the queue, and it is the main thread
which does the printing if something is found:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# simple_threading_queue_eg.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;random&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_fn&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# pause a random number of seconds before doing anything else&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(random&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;random())&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# put a message on the queue&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{0} {1}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(a,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b))&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# make 4 threads, which will all end up calling the same function&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# (but will pass different arguments to it)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;john&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;paul&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;george&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_fn,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ringo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q))&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# making a thread a `daemon` means that when the main process&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# ends the thread will end too&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start the threads running&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_2&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_3&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;thread_4&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# if there is any message on the queue, print it.&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# if the queue is empty, the exception will be caught&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# and the queue polled again in a moment&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;implementing-non-blocking-output:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Implementing Non-Blocking Output&lt;/h2&gt;

&lt;p&gt;That last example came very close to having the functionality we desired of our
non-blocking output. We now need to take the principles explored in
&lt;code&gt;simple_threading_queue_eg.py&lt;/code&gt; and apply them to putting output from process A
and B&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt; onto a queue, rather than just any old string.&lt;/p&gt;

&lt;p&gt;We want the target function of our output reading threads to keep attempting to
read from their target pipes, whenever they manage to read a whole line of
something we want them to put this line onto a queue:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_output&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads output from `pipe`, when line has been read, puts&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;line on Queue `q`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(l)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A thread that reads from the &lt;code&gt;stdout&lt;/code&gt; of procedure &lt;code&gt;A&lt;/code&gt; and put any output it
finds into a queue, &lt;code&gt;pa_q&lt;/code&gt; can be started like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# queue for storing output lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of thread to read output from procedures A&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;with a similar sequence needed for procedure &lt;code&gt;B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With these threads busily running in the background, putting any output they get
onto a queue named &lt;code&gt;pa_q&lt;/code&gt; for process &lt;code&gt;A&lt;/code&gt;, or &lt;code&gt;pb_q&lt;/code&gt; for &lt;code&gt;B&lt;/code&gt;, we want our main
thread to loop, periodically checking the queues to see if process &lt;code&gt;A&lt;/code&gt; or &lt;code&gt;B&lt;/code&gt; has
produced any output. Upon finding some, we just prepend the letter of the
producing process and print the message:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# ...&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure A (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure B (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;And that should be it! Putting this all together into a working script:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# two_subprocesses_with_output.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_output&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads output from `pipe`, when line has been read, puts&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;line on Queue `q`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(l)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start both `proc_a.py` and `proc_b.py`&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# queues for storing output lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of threads to read output from procedures A and B&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# check if either sub-process has finished&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure A (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure B (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Running this will result in the output of both sub procedures being multiplexed
and printed out together:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;non-blocking-input:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Non-blocking Input&lt;/h2&gt;

&lt;p&gt;The way we want input for our test harness to work is like this, we want to have
two named pipes in the file system, &lt;code&gt;proc_a_input&lt;/code&gt; and &lt;code&gt;proc_b_input&lt;/code&gt;, for which
attempts are constantly made to open and read from them. Whenever anything is
read from either it can be passed directly to the &lt;code&gt;stdin&lt;/code&gt; of the appropriate
process.&lt;/p&gt;

&lt;p&gt;This case is actually a little simpler than the output case, since we don&amp;rsquo;t have
to make any communication back to the main thread.&lt;/p&gt;

&lt;p&gt;The target function of our input threads will look like what we had in
&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes#external_pipe_say_my_name_constant&#34;&gt;external_pipe_say_my_name_constant.py&lt;/a&gt;,
i.e.:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_input&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(write_pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in_pipe_name):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads input from a pipe with name `read_pipe_name`,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;writing this input straight into `write_pipe`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(in_pipe_name,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;write_pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;write_pipe&lt;/code&gt; will be the &lt;code&gt;stdin&lt;/code&gt; of our processes &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, and
&lt;code&gt;in_pipe_name&lt;/code&gt; will be the name of the external pipes in our file system,
&lt;code&gt;proc_a_input&lt;/code&gt; and &lt;code&gt;proc_b_input&lt;/code&gt;. For procedure &lt;code&gt;A&lt;/code&gt;, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# start a thread to read input into procedure A&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a_input&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;With everything mashed together you&amp;rsquo;ll get a program like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# two_subprocesses_with_output_and_input.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_output&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;q):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads output from `pipe`, when line has been read, puts&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;line on Queue `q`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;put(l)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;read_input&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(write_pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;in_pipe_name):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;reads input from a pipe with name `read_pipe_name`,&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;writing this input straight into `write_pipe`&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(in_pipe_name,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;write_pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start both `proc_a.py` and `proc_b.py`&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# lists for storing the lines of output generated&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_line_buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_line_buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; 

&lt;span style=&#34;color: #75715e&#34;&gt;# queues for storing output lines&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of threads to read output from procedures A and B&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_output,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_t&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# start a pair of threads to read input into procedures A and B&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_a_input&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_input_thread&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;threading&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Thread(target&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read_input,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;proc_b_input&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_input_thread&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;start()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;# check if either sub-process has finished&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure A (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pa_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;A: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# write output from procedure B (if there is any)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pb_q&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(False)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;B: &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(l)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Queue&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Empty:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;running-the-suite:3d7f2b7fc46d7c825999d7e45bcc2804&#34;&gt;Running the Suite&lt;/h2&gt;

&lt;p&gt;Now all that is left to do is give the suite a test-drive an check that it
works. In the same directory that you&amp;rsquo;re going to be running the script make
sure you&amp;rsquo;ve got two named pipes &lt;code&gt;proc_a_input&lt;/code&gt; and &lt;code&gt;proc_b_input&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a_input&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b_input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;then you can run &lt;code&gt;two_subprocesses_with_output_and_input.py&lt;/code&gt;. In another
terminal, by piping input into &lt;code&gt;proc_a_input&lt;/code&gt; or &lt;code&gt;proc_b_input&lt;/code&gt; you should see
the consequences of that input reflected in the output of the suite, for example:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hi&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;there&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_a_input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;in another terminal should give you the output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;says,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hi there&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and following this with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hi&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc_b_input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will give you the output:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;says,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hi there&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;A:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;says,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hi from b&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;B:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;what&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;should&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;say&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Naturally this is a simple example, but if you are trying to test a
server-client architecture it can be very powerful and labour saving.
Since all the output goes through the main thread, you can check that your
server and client are in appropriate states before handing interactive control
over to the user.&lt;/p&gt;

&lt;p&gt;As an illustration, I needed to prompt my client to send a couple of messages to
the server before I wanted to do interactive testing. This was a trivial task of
sending the appropriate messages through the client&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; and checking for
the correct responses from the server&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt; before starting the threaded
input and the event loop of the main process.&lt;/p&gt;

&lt;p&gt;I hope this exploration of Python pipes and subprocesses will save you a similar
amount of time in the future!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 5: Subprocesses and Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:44:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/</guid>
      <description>

&lt;p&gt;The Python &lt;a href=&#34;https://docs.python.org/2/library/subprocess.html&#34;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt;
module (used for starting subprocesses) is one module that provides scope for
heavy usage of pipes. Here we&amp;rsquo;ll look at this module and how you can use pipes
to manipulate the input and output of the spawned subprocess.&lt;/p&gt;

&lt;h2 id=&#34;a-crash-course-in-the-subprocess-module:1956c9ac1946b782115d32b1112a1769&#34;&gt;A Crash Course in the subprocess Module&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s have a program, for example the Python program detailed below that queries
a person for their name and then echos it with a greeting (note this example is
a Python program, but we can, in principle, use any program)&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what&amp;#39;s your name?&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;iter(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;readline,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name[:&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Well how do you do {0}?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(name)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;what&amp;#39;s your name?&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This program can be started from within a separate Python process by using the
&lt;code&gt;subprocess&lt;/code&gt; module, like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# run_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt; creates a &lt;code&gt;Popen&lt;/code&gt; object and kicks off a subprocess similar
to the one that would be started by typing &lt;code&gt;python say_my_name.py&lt;/code&gt; at a command
prompt. The subsequent &lt;code&gt;while&lt;/code&gt; loop repeatedly polls the &lt;code&gt;Popen&lt;/code&gt; object, and
makes sure that the &lt;code&gt;returncode&lt;/code&gt; attribute is changed from being &lt;code&gt;None&lt;/code&gt; when the
child process terminates, at which point the mother process will quickly also
terminate.&lt;/p&gt;

&lt;p&gt;By default, the &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; of the child process are set to be the same
as the &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; of the mother, meaning that &lt;code&gt;say_my_name.py&lt;/code&gt;
operates much as before. Next, we&amp;rsquo;ll work at changing the &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;
of the child and exploring what possibilities this uncovers.&lt;/p&gt;

&lt;h2 id=&#34;controlling-the-input-and-output:1956c9ac1946b782115d32b1112a1769&#34;&gt;Controlling the Input and Output&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt; can take two optional named arguments, &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;,
that set the pipes that the child process uses as its &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;. By
passing the constant &lt;code&gt;subprocess.PIPE&lt;/code&gt; as either of them you specify that you
want the resultant &lt;code&gt;Popen&lt;/code&gt; object to have control of child proccess&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt;
and/or &lt;code&gt;stdout&lt;/code&gt;, through the &lt;code&gt;Popen&lt;/code&gt;&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;In the next example, three names are passed to the &lt;code&gt;say_my_name.py&lt;/code&gt; child
process before the &lt;code&gt;EOF&lt;/code&gt; signal is sent to the child&amp;rsquo;s input. The mother process
then waits for the child to finish, before reading whatever output the child
produced and printing it with a small piece of text prepended:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# internal_pipe_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;


&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;matthew&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mark&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;luke&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I got back from the program this:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;{0}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is easy to see how to extrapolate from this small program to develop an
end-to-end testing suite, starting a program,  passing it in some input and
checking that the output that is received is that expected. But what to if you
want a mix of scripted input and user input, say for a testing program when you
wish to get the test subject into a certain state before allowing interactive
input? That&amp;rsquo;s what we&amp;rsquo;ll look at next.&lt;/p&gt;

&lt;h2 id=&#34;mixing-scripted-and-interactive-input:1956c9ac1946b782115d32b1112a1769&#34;&gt;Mixing Scripted and Interactive Input&lt;/h2&gt;

&lt;p&gt;To expose the subprocess to a certain amount of scripted input, before reverting
to giving the subprocess input from &lt;code&gt;stdin&lt;/code&gt;, we have to set up the subprocess to
accept input from a pipe, hand it our scripted input and then manually code to
read from the mother process&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; passing whatever we read to the child&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# mixed_input_pipe_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE)&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;matthew&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;mark&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;luke&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;close()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(i)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;so this code will provide the names &amp;lsquo;matthew&amp;rsquo;, &amp;lsquo;mark&amp;rsquo; and &amp;lsquo;luke&amp;rsquo; to the
subprocess before switching to reading every byte from &lt;code&gt;stdin&lt;/code&gt;. When &lt;code&gt;sys.stdin&lt;/code&gt;
returns an empty string (&amp;ldquo;), that indicates that &lt;code&gt;stdin&lt;/code&gt; has closed so we can
close the &lt;code&gt;stdin&lt;/code&gt; of the child process and clean up.&lt;/p&gt;

&lt;h2 id=&#34;using-external-pipes:1956c9ac1946b782115d32b1112a1769&#34;&gt;Using External Pipes&lt;/h2&gt;

&lt;p&gt;Another interesting trick with subprocesses that you might want to use from time
to time (we&amp;rsquo;ll use it in the next section, in fact) is taking &lt;code&gt;stdin&lt;/code&gt; and
&lt;code&gt;stdout&lt;/code&gt; for the subprocess from a couple of external pipes. To do this we&amp;rsquo;ll
first need to create a couple of pipes in our working directory where we will
pipe the input into and read the output out of:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Once these two pipes exist, our first stab at using external pipes with a
subprocess takes the following course:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open the &lt;code&gt;input_pipe&lt;/code&gt; (for reading) and &lt;code&gt;output_pipe&lt;/code&gt; (for writing)&lt;/li&gt;
&lt;li&gt;start the subprocess, with &lt;code&gt;stdin&lt;/code&gt; being &lt;code&gt;input_pipe&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; being
&lt;code&gt;output_pipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;keep polling the subprocess until it returns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in code this looks like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# external_pipe_say_my_name.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;input_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe)&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To test this out, we start &lt;code&gt;external_pipe_say_my_name.py&lt;/code&gt; in one virtual
terminal. In another we pipe some input to &lt;code&gt;input_pipe&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;john&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;then, when we read from &lt;code&gt;output_pipe&lt;/code&gt; in a third, say with &lt;code&gt;cat output_pipe&lt;/code&gt;,
we retrieve the output of the &lt;code&gt;say_my_name.py&lt;/code&gt; subprocess.&lt;/p&gt;

&lt;p&gt;There is a small problem with this though, that being that once &lt;code&gt;echo john &amp;gt;
input_pipe&lt;/code&gt; returns and closes the pipe, sending &lt;code&gt;EOF&lt;/code&gt;, the child process closes
and so does the mother process. What we might like to be able to do is keep
piping names to &lt;code&gt;input_pipe&lt;/code&gt; and have our mother process keep reading them and
passing them on to its child, without the child finishing.&lt;/p&gt;

&lt;p&gt;Achieving this involves a slightly different flow from the one described
previously:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open the &lt;code&gt;output_pipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;start the subprocess, using &lt;code&gt;output_pipe&lt;/code&gt; as the output pipe and an internal
pipe as &lt;code&gt;stdin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;keep polling for the end of the child process&lt;/li&gt;
&lt;li&gt;try and open &lt;code&gt;input_pipe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;write to the child&amp;rsquo;s &lt;code&gt;stdin&lt;/code&gt; what you read from the pipe&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;in code this looks like:&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;external_pipe_say_my_name_constant&#34;&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# external_pipe_say_my_name_constant.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Popen([&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stdbuf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;-o0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;say_my_name.py&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PIPE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;output_pipe)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;poll()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;returncode&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;input_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input_pipe:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(input_pipe&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;to test this, we start &lt;code&gt;external_pipe_say_my_name_constant.py&lt;/code&gt; in one virtual
terminal, start reading from &lt;code&gt;output_pipe&lt;/code&gt; with &lt;code&gt;cat output_pipe&lt;/code&gt; and in a third
terminal we can write to the input repeatedly with commands such as &lt;code&gt;echo greg &amp;gt;
input_pipe&lt;/code&gt;, noting that the output is successfully deposited in the
&lt;code&gt;output_pipe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One subtlety that you might have noticed is that the command used to start the
subprocess is &lt;code&gt;stdbuf -o0 python say_my_name.py&lt;/code&gt; as opposed to the usual
&lt;code&gt;python say_my_name.py&lt;/code&gt;, what does this mysterious &lt;code&gt;stdbuf -o0&lt;/code&gt; do?&lt;/p&gt;

&lt;p&gt;A quick read of the flipping manual will tell you that this command turns off
buffering for &lt;code&gt;stdout&lt;/code&gt; stream. This is necessary because by default Linux
buffers &lt;code&gt;stdout&lt;/code&gt; through a pipe. What this means in our case is that
&lt;code&gt;say_my_name.py&lt;/code&gt; will receive the names we input, and will process them and
produce an output, but this output will be buffered and not sent on immediately
to the mother process, meaning that when we view the output we see nothing
(at least until the buffer is filled). Try taking away that &lt;code&gt;stdbuf&lt;/code&gt; argument
from the call to &lt;code&gt;Popen&lt;/code&gt; and see what happens for yourself (the answer is not
much).&lt;/p&gt;

&lt;p&gt;By now we&amp;rsquo;ve just about dealt with every permutation of putting stuff in pipes
from various sources and passing it to a sub-process, we&amp;rsquo;re ready for a final
step, a piece de resistance, a program that spawns two subprocesses and allows
the user to send input/read output from both. But that&amp;rsquo;s for the &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/&#34;&gt;next
section&amp;hellip;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 4: On the Buffers</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers/</link>
      <pubDate>Thu, 02 Mar 2017 23:43:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers/</guid>
      <description>

&lt;p&gt;In the last section we looked at sending a message through a pipe and everything
worked great.  However there was a porblem, and this becomes apparent if we
alter the sending program and make it run a little slower, perhaps by adding a
short sleep in between sending each letter of the message, something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if we run this program and attempt to read from &lt;code&gt;my_pipe&lt;/code&gt; in a different virtual
terminal with &lt;code&gt;cat my_pipe&lt;/code&gt; we&amp;rsquo;ll see that we need to show a bit of patience!
The terminal running the Python process will periodically print reassuring
messages saying it has sent letters, and yet we&amp;rsquo;ll see no letters shown on the
virtual terminal running &lt;code&gt;cat my_pipe&lt;/code&gt;, at least not until the end of the
message is reached, at which point the whole message will suddenly appear.&lt;/p&gt;

&lt;h2 id=&#34;unbuffered-writing:c66f5d5419b8a26a1cc7c3e102ecb685&#34;&gt;Unbuffered Writing&lt;/h2&gt;

&lt;p&gt;The root of this problem is buffering &amp;ndash; rather than being sent straight through
the pipe, Python&amp;rsquo;s IO, by default, buffers the data, and this data is not
flushed until the &lt;code&gt;EOF&lt;/code&gt; (end of file) signal is encountered.&lt;/p&gt;

&lt;p&gt;Looking at the manual page for Python&amp;rsquo;s
&lt;a href=&#34;https://docs.python.org/2/library/functions.html#open&#34;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; function we see
that there is a way to control the size of this buffer, through the &lt;code&gt;buffering&lt;/code&gt;
argument. &lt;code&gt;buffering&lt;/code&gt; has a special meaning when it is set equal to 0, where
no buffering is done at all. Altering our slow write to have &lt;code&gt;buffering = 0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;write_to_pipe_buf_0&#34;&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# write_to_pipe_buf_0.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and running again, while attempting to read again with &lt;code&gt;cat my_pipe&lt;/code&gt; in another
virtual terminal, we can see the effect of altering the buffering; each letter
gets shown one at a time.&lt;/p&gt;

&lt;p&gt;The manual page for
&lt;a href=&#34;https://docs.python.org/2/library/functions.html#open&#34;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; also mentions a
special value of &lt;code&gt;buffering = 1&lt;/code&gt;, which is line buffered. This does what its
name implies, as can be seen by running this program, which has our message
broken down into lines, while reading from a pipe:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# write_to_pipe_buf_1.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;to a&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Other values of &lt;code&gt;buffering&lt;/code&gt; change the size of the chunks in which the data is
sent across the pipe, see for example what effect a &lt;code&gt;buffering&lt;/code&gt; of &lt;code&gt;4&lt;/code&gt; has on
this program:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# write_to_pipe_buf_4.py&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have sent a letter&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This program sends the message across the pipe in chunks of approximately 4
bytes.&lt;/p&gt;

&lt;h2 id=&#34;unbuffered-reading:c66f5d5419b8a26a1cc7c3e102ecb685&#34;&gt;Unbuffered Reading&lt;/h2&gt;

&lt;p&gt;The natural counterpart to a Python program that does unbuffered writing is one
that does unbuffered reading, so let&amp;rsquo;s write one now.&lt;/p&gt;

&lt;p&gt;Firstly, trying our previous program for reading from a pipe,
&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python#read_from_pipe&#34;&gt;&lt;code&gt;read_from_pipe.py&lt;/code&gt;&lt;/a&gt;,
(by running &lt;a href=&#34;#write_to_pipe_buf_0&#34;&gt;&lt;code&gt;write_to_pipe_buf_0.py&lt;/code&gt;&lt;/a&gt; in one virtual
terminal, and
&lt;a href=&#34;https://lyceum-allotments.github.io/2016/11/python-and-pipes-part-3-pipes-in-python#read_from_pipe&#34;&gt;&lt;code&gt;read_from_pipe.py&lt;/code&gt;&lt;/a&gt;
in another)
we see that it doesn&amp;rsquo;t display the message being received letter by letter, but
that it instead blocks, the problem being that the iterator through the pipe&amp;rsquo;s
&lt;code&gt;FILE&lt;/code&gt; object, &lt;code&gt;for l in f&lt;/code&gt;, doesn&amp;rsquo;t commence until &lt;code&gt;f&lt;/code&gt; has reached the &lt;code&gt;EOF&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To read just a set number of bytes from a &lt;code&gt;file&lt;/code&gt; object we need to try a
slightly different approach, using the
&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#file.read&#34;&gt;&lt;code&gt;f.read(x)&lt;/code&gt;&lt;/a&gt;
method which blocks until it reads &lt;code&gt;x&lt;/code&gt; bytes from &lt;code&gt;f&lt;/code&gt; or reaches &lt;code&gt;EOF&lt;/code&gt;,
returning either a string of the data used or &lt;code&gt;None&lt;/code&gt;, if the &lt;code&gt;file&lt;/code&gt; object is
finished.&lt;/p&gt;

&lt;p&gt;Feeling our way towards solving the problem, a program like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;bufsize&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(bufsize)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will read from 1 character from the pipe, print it and then the Python program
finishes. When we run it with &lt;a href=&#34;#write_to_pipe_buf_0&#34;&gt;&lt;code&gt;write_pipe_buf_0.py&lt;/code&gt;&lt;/a&gt;
we get the first character of the message printed as soon as it is available in
the pipe. Increasing &lt;code&gt;bufsize&lt;/code&gt; we see that we can alter the number of characters
that are printed,
&lt;a href=&#34;https://docs.python.org/2/library/stdtypes.html#file.read&#34;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; blocking
until that many characters have been sent to the pipe.&lt;/p&gt;

&lt;p&gt;Another bit of behaviour that should be noted is that when the process reading
from the pipe closes before the message being written has finshed being written
the writing process crashes, throwing an
&lt;a href=&#34;(https://docs.python.org/2/library/stdtypes.html#file.read&#34;&gt;&lt;code&gt;IOError&lt;/code&gt;&lt;/a&gt;
exception complaining of a broken pipe. We won&amp;rsquo;t concern ourselves with that
here.&lt;/p&gt;

&lt;p&gt;If we want to read a message through a pipe letter by letter, then, we need to
loop, reading a character and, whenever one is available, printing it and waiting
for the next character. We break from the loop whenever &lt;code&gt;read&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;,
i.e. when the message has ended. In short, something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c,&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The only problem with this is it doesn&amp;rsquo;t work! Once again the message won&amp;rsquo;t
display until it has completely sent and the pipe closed. The problem this time
is write-buffered IO at the operating system level. When writing to &lt;code&gt;stdout&lt;/code&gt; (as
&lt;code&gt;print&lt;/code&gt; does) the output is buffered, i.e. will only display when enough
characters have been printed. Once again the message won&amp;rsquo;t display until it has
completely sent and the pipe closed. The problem this time is write-buffered IO
at the operating system level. When writing to &lt;code&gt;stdout&lt;/code&gt; (as &lt;code&gt;print&lt;/code&gt; does) the
output is buffered, i.e. will only display when enough characters have been
printed.&lt;/p&gt;

&lt;p&gt;To circumvent this we need to go a little lower level and use Python&amp;rsquo;s &lt;code&gt;sys&lt;/code&gt;
module.
&lt;a href=&#34;https://docs.python.org/2/library/sys.html?highlight=sys%20module#sys.stdout&#34;&gt;&lt;code&gt;sys.stdout&lt;/code&gt;&lt;/a&gt;
is a &lt;code&gt;file&lt;/code&gt; object that represents Unix&amp;rsquo;s &lt;code&gt;stdout&lt;/code&gt; pipe, i.e. the pipe that when
written to gets displayed on the screen.&lt;/p&gt;

&lt;p&gt;Doing something like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;flush()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will write a string to &lt;code&gt;stdout&lt;/code&gt; and then flush it, i.e. force what&amp;rsquo;s been
written to be displayed on the screen. With this in mind by changing our
unbuffered reading program to this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;read(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;c:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(c)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdout&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;flush()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and running this in concert with &lt;a href=&#34;#write_to_pipe_buf_0&#34;&gt;&lt;code&gt;write_pipe_buf_0.py&lt;/code&gt;&lt;/a&gt;
in another buffer we see that it works how we want, the message is displayed
letter by letter, as it is received!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 3: Pipes in Python</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python/</link>
      <pubDate>Thu, 02 Mar 2017 23:42:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/&#34;&gt;previous
section&lt;/a&gt; it was
shown how pipes were represented in the operating system in Unix, and how they
were written and read from in a way that was very much analagous to how ordinary
files are. This is one of the major insights of the Unix family of operating
systems, they make explicit the analogies between interprocess communication and
ordinary input and output &amp;ndash; if a program is made to operate based on the input
of plain text and produce plain text as an output it does not matter about the
origins of that input, be it a human with a keyboard, another program or even
input travelling from across the world over the internet.&lt;/p&gt;

&lt;p&gt;It should come as no surprise that Python continues in this happy tradition,
treating named pipes in much the same way as files.&lt;/p&gt;

&lt;h2 id=&#34;writing-to-pipes-in-python:06e457c8c20e32f75e7fe39c94852657&#34;&gt;Writing to Pipes in Python&lt;/h2&gt;

&lt;p&gt;Here is a Python program for writing a short string of text to a file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_file&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened file, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello to a file&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and here is how we would read the contents of that file from a virtual console:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The equivalent program for writing to our pipe &lt;code&gt;my_pipe&lt;/code&gt; is fundamentally
exactly the same,&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing writing....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello through a pipe&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;a quick&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;will read the contents of the pipe in a way exactly analagous to a file.&lt;/p&gt;

&lt;p&gt;One thing worth noting is that the message, &amp;ldquo;have opened pipe, commencing
writing&amp;rdquo; does not get displayed until we open the other end of the pipe for
reading &amp;ndash; the call to &lt;code&gt;open&lt;/code&gt; in Python is blocking until the pipe has got an
end to be written to.&lt;/p&gt;

&lt;h2 id=&#34;reading-from-pipes-in-python:06e457c8c20e32f75e7fe39c94852657&#34;&gt;Reading from Pipes in Python&lt;/h2&gt;

&lt;p&gt;Reading from pipes is also exactly analagous to reading from a pipe:&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;read_from_pipe&#34;&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# read_from_pipe.py&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;my_pipe&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;have opened pipe, commencing reading....&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;l,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;by running &lt;code&gt;write_to_pipe.py&lt;/code&gt; in one virtual console and &lt;code&gt;read_from_pipe.py&lt;/code&gt; in
another we recover the same behaviour as we observed in using &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt;
before. Indeed we can run the read and write and the opposite order, and see
that this time it&amp;rsquo;s the call to &lt;code&gt;open&lt;/code&gt; in the read program that blocks, until
the write program is ran and opens the other end of the pipe.&lt;/p&gt;

&lt;p&gt;In the next section we look a bit more at the subtleties around these
operations, specifically the subtleties around &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers&#34;&gt;buffering&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes Part 2: Introduction to Unix Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:41:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/</guid>
      <description>&lt;p&gt;Pipes are one method of interprocess communication in the Unix world, the other
being sockets. The differences are that pipes are more simple to set up and use
but more narrow in scope. Pipes are unidirectional, having one writer and one
reader, and operate on a &amp;lsquo;first in first out&amp;rsquo; (or FIFO) principle &amp;ndash; i.e. the
first bit of data you put in is the first you get out; if I put &amp;lsquo;hello world&amp;rsquo;
into a pipe I will receive a &amp;lsquo;h&amp;rsquo; first and the &amp;rsquo;d&amp;rsquo; last.&lt;/p&gt;

&lt;p&gt;Using the Unix shell it&amp;rsquo;s simple to see how pipes work. Just open two virtual
consoles and change directory so that you are in the same directory in both of
them. Make a named pipe by using the command&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mkfifo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which will make a pipe with the name &lt;code&gt;my_pipe&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Listing the contents of your directory with &lt;code&gt;ls -l&lt;/code&gt; you will see &lt;code&gt;my_pipe&lt;/code&gt;
listed in the directory just like a normal file, only it will have the letter
&lt;code&gt;p&lt;/code&gt; preceding its permissions:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;prw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Nov&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;17&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can redirect the output of any program to &lt;code&gt;my_pipe&lt;/code&gt; in just the same way as
you would redirect it to a file, a litle something like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello through a pipe&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the other virtual terminal you can access the contents of the pipe in a
similar way to reading the contents of a file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;cat&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;my_pipe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and you should see &amp;ldquo;hello through a pipe&amp;rdquo; printed onto the screen.&lt;/p&gt;

&lt;p&gt;Note also that the &lt;code&gt;echo&lt;/code&gt; command blocked until you read from the pipe. As an
experiment, try things the other way round; &lt;code&gt;cat my_pipe&lt;/code&gt; will now block until
you write something into the pipe with, say, &lt;code&gt;echo &amp;quot;hello through a pipe&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hopefully this short introduction will have illustrated to you how simple yet
effective Unix pipes can be, named pipes look and behave in many ways just like
a file and so make interprocess communication as simple as reading/writing from
files. The &lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python&#34;&gt;next section&lt;/a&gt; will go on to discuss how these pipes can be used from
Python.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python and Pipes</title>
      <link>https://lyceum-allotments.github.io/2017/03/python-and-pipes/</link>
      <pubDate>Thu, 02 Mar 2017 23:40:37 +0000</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2017/03/python-and-pipes/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working a bit with pipes in Python, using the
&lt;a href=&#34;https://docs.python.org/2/library/subprocess.html&#34;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module to
kick off a couple of processes, a client and a server, and using pipes to
redirect their input and output in such a way as to test them. I thought it
might be an idea to write about using pipes primarily from a Python viewpoint,
with a view especially to clarifying things like blocking and buffering.&lt;/p&gt;

&lt;p&gt;In the course of this tutorial we will develop a testing tool for a pair of
programs. This tool will be able to start both programs, issue some commands to
both of them and then source its input from named pipes, allowing the user to
enter their own commands as and when they see fit. The output will be provided
via &lt;code&gt;stdout&lt;/code&gt; and will be the multiplexed output of both prgrams, prefixed with
an appropriate identifying prefix. A typical use case of this testing tool (and
what I am using it for) is testing a client and server, by which I need to fire
up both client and server, automate the entry of some configuration commands
and then have manual control to enter more commands to both client and server.&lt;/p&gt;

&lt;p&gt;The tutorial is broken into the following pieces:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-2-introduction-to-unix-pipes/&#34;&gt;&lt;strong&gt;Introduction to Unix Pipes&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; a brief introduction to Unix named pipes in general, and how to use them&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-3-pipes-in-python/&#34;&gt;&lt;strong&gt;Pipes in Python&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; Python is used to write and read from pipes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-4-on-the-buffers/&#34;&gt;&lt;strong&gt;On the Buffers&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; looking at the effect of buffering in reading and writing from pipes, writing
a program that sends a message letter by letter and line by line&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-5-subprocesses-and-pipes/&#34;&gt;&lt;strong&gt;Subrocesses and pipes&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; where a subprocess is spawned in Python and the input and output redirected
and manipulated to our heart&amp;rsquo;s content&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2017/03/python-and-pipes-part-6-multiple-subprocesses-and-pipes/&#34;&gt;&lt;strong&gt;Multiple subprocesses and pipes&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; the fully-fledged testing tool is developed, a program that spawns two
subprocesses, and redirects the inputs and outputs to four pipes&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten Image Viewer</title>
      <link>https://lyceum-allotments.github.io/2016/08/emscripten-image-viewer/</link>
      <pubDate>Wed, 03 Aug 2016 10:14:48 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/08/emscripten-image-viewer/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve ben playing around with developing a zoomable and panning
image viewer using Emscripten and its proved to be a good exercise in accessing
parts of the page&amp;rsquo;s HTML document outside of the Emscripten run-time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/pages/newsham_park/newsham_park.html&#34;&gt;
&lt;img style=&#34;display:block;margin-left:auto;margin-right:auto&#34; src=&#34;https://lyceum-allotments.github.io/images/complete_image_viewer_screen_shot.png&#34; alt=&#34;complete image viewer screenshot&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The end goal is to provide a JavaScript API to an image viewer, consisting of an
&lt;code&gt;ImgViewer&lt;/code&gt; object and a single method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ImgViewer(image, canvas)&lt;/code&gt; &amp;ndash; sets up the viewer to use the
&lt;code&gt;HTMLCanvasElement&lt;/code&gt;, &lt;code&gt;canvas&lt;/code&gt; and show a pannable and zoomable copy of the
&lt;code&gt;HTMLImageElement&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImgViewer.changeImage(image)&lt;/code&gt; &amp;ndash; changes the image shown by the image viewer to the
&lt;code&gt;HTMLImageElement&lt;/code&gt;, &lt;code&gt;image&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main bit of ground here that I didn&amp;rsquo;t cover in my previous
&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl-2-tutorial-part-1/&#34;&gt;tutorial on Emscripten and SDL2&lt;/a&gt;,
is how to somehow get the image data from the &lt;code&gt;HTMLImageElement&lt;/code&gt; to be
accessible from the Emscripten compiled C program.&lt;/p&gt;

&lt;p&gt;Previously, images were loaded using Emscripten&amp;rsquo;s concept of a virtual
filesystem, where assets are &amp;lsquo;preloaded&amp;rsquo; with an XML HTTP request. This is very
good for keeping changes down to a minimum when porting desktop applications to
run in the browser, but it can be equally useful to access parts of the HTML
document from within an Emscripten compiled C program. In this post, the image
data from an &lt;code&gt;HTMLImageElement&lt;/code&gt; will be accessed and used within SDL2 to make a
zoomable and panning image viewer, but the concepts explored here could be used
for any number of applications, using the speed of JavaScript produced Emscripten
to do client-side image processing is one example.&lt;/p&gt;

&lt;h2 id=&#34;what-c-wants:60e792496b2fdcb01205cf2b17ae4f4f&#34;&gt;What C Wants&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s tackle this problem from the C side of things back, outwards, to what we
need to do in JavaScript. What our C program will require is a pointer to the
chunk of memory containing the image data we wish to show in our image viewer
(along with how many bytes make up the image data). Once we have this, SDL has
the concept of a &lt;a href=&#34;https://wiki.libsdl.org/SDL_RWops&#34;&gt;&lt;code&gt;SDL_RWops&lt;/code&gt;&lt;/a&gt; structure, to
provide a common interface for reading from all sorts of stream devices. Using
the function&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_RWops&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;SDL_RWFromConstMem&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;mem,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;size);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can create a &lt;code&gt;SDL_RWops&lt;/code&gt; from a pointer to some constant memory.&lt;/p&gt;

&lt;p&gt;This can then be passed to the SDL_image function,
&lt;a href=&#34;http://jcatki.no-ip.org:8080/SDL_image/SDL_image.html#SEC12&#34;&gt;&lt;code&gt;IMG_Load_RW&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Surface&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;IMG_Load_RW&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(SDL_RWops&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;src,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;freesrc);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which reads the memory referred to by &lt;code&gt;SDL_RWops&lt;/code&gt; and gives us a SDL_Surface
pointer that we can turn into a texture and render in the
&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-4-look-owl/&#34;&gt;usual way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;load_image_section&#34;&gt;
In code, the C function for changing the image will look something like this:
&lt;/span&gt;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Renderer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;renderer;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Texture&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;img_tex;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;// Set up renderer in context before calling this function&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;load_image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image_data,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;size)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_RWops&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_RWFromConstMem(image_data,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;size);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Surface&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;IMG_Load_RW(a,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx.img_tex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_CreateTextureFromSurface(ctx.renderer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;image);&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_FreeSurface(image);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;providing-what-c-wants:60e792496b2fdcb01205cf2b17ae4f4f&#34;&gt;Providing What C Wants&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve a long way to go yet though. The next step is to be able to call the C
function from JavaScript, passing it a pointer to some &amp;lsquo;memory&amp;rsquo; we&amp;rsquo;ve previously
written to in JavaScript. I&amp;rsquo;ve put &amp;lsquo;memory&amp;rsquo; in inverted commas because
JavaScript isn&amp;rsquo;t the sort of language that goes around just handing out access
to raw memory. I&amp;rsquo;ve alluded in the past to how Emscripten provides C programs
with the illusion of memory through
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays&#34;&gt;typed arrays&lt;/a&gt;
&amp;ndash; similar in interface to a JavaScript
&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&#34;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;
but containing elements all of same type. In the same way that C programs can cast
a &lt;code&gt;char *&lt;/code&gt; to an &lt;code&gt;int *&lt;/code&gt; and by doing so change what data-type the array is
treated as, JavaScript has the concept of a &amp;lsquo;view&amp;rsquo; of an array buffer;
&lt;code&gt;var ta = Uint8Array(buffer)&lt;/code&gt; will view the array buffer &lt;code&gt;buffer&lt;/code&gt; as an array of
unsigned 8 bit integers, &lt;code&gt;var tb = Uint32Array(buffer)&lt;/code&gt; will access the same
data as an array of unsigned 32 bit integers.&lt;/p&gt;

&lt;p&gt;As an illustration,
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ta&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Uint8Array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ta&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// prints 1&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;tb&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Uint32Array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ta&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;buffer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;tb&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// prints 16777729 (1 + 2 * 2^8 + 0 * 2^16 + 1 * 2^24)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Which is broadly similar to doing the following in C:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ta[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%u&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ta[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// prints 1&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tb&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;uint32_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)ta;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%u&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tb[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// prints 16777729&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Typed arrays can be passed C side by the Emscripten provided JavaScript
functions &lt;code&gt;ccall&lt;/code&gt; and &lt;code&gt;cwrap&lt;/code&gt;. I&amp;rsquo;ve discussed &lt;code&gt;ccall&lt;/code&gt;
&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-7-get-naked-owl/#ccall_section&#34;&gt;before&lt;/a&gt;,
&lt;code&gt;cwrap&lt;/code&gt; is similar, but returns a JavaScript function that can be used for calling
the &amp;lsquo;wrapped&amp;rsquo; C function rather than calling it directly. If a C function
&lt;code&gt;void print_array(void *a)&lt;/code&gt; has been exported when Emscripten was compiled, a
function, &lt;code&gt;print_array_js&lt;/code&gt; taking a typed array as an argument can be created
like so:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;print_array_js&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cwrap&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;print_array&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;array&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Putting all these concepts together let&amp;rsquo;s show how you&amp;rsquo;d create an array of
unsigned 8-bit integers in JavaScript and print them in the C program.&lt;/p&gt;

&lt;p&gt;The guts of the HTML document will be:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;textarea&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;print_array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// when Emscripten run-time loads, will be overwritten&lt;/span&gt;
                             &lt;span style=&#34;color: #75715e&#34;&gt;// by function wrapper over a C print_array function&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// Creates a typed array and passes this to C function for printing&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;start_function&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Uint8Array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;([&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;print_array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;onRuntimeInitialized&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #75715e&#34;&gt;// On load of Emscripten run-time, wrap the print_array C function and&lt;/span&gt;
                &lt;span style=&#34;color: #75715e&#34;&gt;// call &amp;#39;start_function&amp;#39; to get us underway&lt;/span&gt;
                &lt;span style=&#34;color: #a6e22e&#34;&gt;print_array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cwrap&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;print_array&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;array&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
                &lt;span style=&#34;color: #a6e22e&#34;&gt;start_function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt; 
            &lt;span style=&#34;color: #a6e22e&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementById&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;output&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color: #a6e22e&#34;&gt;element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;while the C program will look like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;print_array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;uint8_t&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;array is [%u, %u, %u, %u]&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/print_array.html&#34;&gt;print_array.html&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/print_array.tar.gz&#34;&gt;print_array.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/print_array.zip&#34;&gt;print_array.zip&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;As a next step, let&amp;rsquo;s put these ideas to work through the task of printing
&amp;lsquo;hello world&amp;rsquo; via passing an array of C characters (or, equivalently, an array
of unsigned 8 bit integers) from JavaScript to a C program. This is mostly
unnecessary as Emscripten allows you to pass JavaScript &lt;code&gt;String&lt;/code&gt; types but
nontheless it will come in useful in the next step.&lt;/p&gt;

&lt;p&gt;The important function at this juncture is the JavaScript &lt;code&gt;String&lt;/code&gt; method
&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt&#34;&gt;&lt;code&gt;charCodeAt(index)&lt;/code&gt;&lt;/a&gt;
which returns the character code (for our purposes, the ASCII value) of the
character at position &lt;code&gt;index&lt;/code&gt; in the string.&lt;/p&gt;

&lt;p&gt;This means that if we replace &lt;code&gt;start_function&lt;/code&gt; from the previous example with
the following:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;start_function&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_string&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello world!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;array&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Uint8Array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;test_string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;charCodeAt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;test_string&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;print_array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and the &lt;code&gt;print_array&lt;/code&gt; C function with:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;print_array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;a)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;string is &amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;a);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;then we can see that we&amp;rsquo;ve successfully converted a JavaScript &lt;code&gt;String&lt;/code&gt; into a C
string and passed it from JavaScript to the Emscripten run-time. This trick will
turn out to be handy in the next section where we will end up converting the
bytes of the image we want to view in our viewer into a &lt;code&gt;String&lt;/code&gt; and then converting
that, in turn, into a &lt;code&gt;Uint8Array&lt;/code&gt; for passing into the C program.&lt;/p&gt;

&lt;p&gt;It should probably be mentioned here that if you&amp;rsquo;re going to try and write to
the array in the C code and expect your changes to be still there when you
access them back in JavaScript land you&amp;rsquo;re going to be sorely disappointed,
array function arguments are passed on the stack in Emscripten and so don&amp;rsquo;t
persist. There are ways of achieving persistence, but they&amp;rsquo;ll have to wait for
another day.&lt;/p&gt;

&lt;h2 id=&#34;a-picture-paints-1000-words-if-you-know-how-to-make-it:60e792496b2fdcb01205cf2b17ae4f4f&#34;&gt;A Picture Paints 1000 Words (if you know how to make it)&lt;/h2&gt;

&lt;p&gt;We now have the capability of passing arbritrary data from JavaScript to an
Emscripten C function and, if that arbritrary data happens to be the bytes of a
png file, can turn that into an SDL_Surface. The final step then is to take an
&lt;code&gt;HTMLImageElement&lt;/code&gt; and somehow get the bytes of the underlying png image from
it.&lt;/p&gt;

&lt;p&gt;You have to take a somewhat roundabout route to achieve this, but it&amp;rsquo;s do-able.
As an overview, you have to load the image element onto a canvas, and then use
the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL&#34;&gt;&lt;code&gt;toDataURL()&lt;/code&gt;&lt;/a&gt;
method of the canvas to get a data URI for the image. For the uninitiated, a
data URI is a base64 encoded (that is an encoding where a character is
represented by 6 bits rather than 8) string which is the binary representation
of an image. The idea is that data URIs can be used to include an image file
directly in an HTML document via the &lt;code&gt;src&lt;/code&gt; attribute of an image element rather
than the more usual method of setting the &lt;code&gt;src&lt;/code&gt; attribute to a URL for which a
separate request must be made. By converting this base64 JavaScript string to be
ASCII and loading it into a &lt;code&gt;Uint8Array&lt;/code&gt; for passing to the C program we can
achieve our goal of making the bytes of a HTMLImageElement accessible by SDL2.
There&amp;rsquo;s even a JavaScript helper function &lt;code&gt;atob()&lt;/code&gt; which converts a base64
encoded string to ASCII for us.&lt;/p&gt;

&lt;p&gt;Doing all this, the JavaScript for getting the bytes from an image will look
something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;static/owl.png&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;onLoad&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;get_bytes(this)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// get bytes of the image&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_bytes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;){&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// create a temporary canvas element for this task&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createElement&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// set it to have same size of underlying image&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;width&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;naturalWidth&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;height&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;naturalHeight&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// load the image in the canvas&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getContext&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;drawImage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;img&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// convert the image to a data URI.&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// A data URI has a prefix describing the type of data the string &lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// following contains, we don&amp;#39;t need this so just replace it with nothing&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;string_data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;toDataURL&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;image/png&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;/^data:image\/(png|jpg);base64,/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// change the data URI from a base64 to an ASCII encoded string&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;decoded_data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;atob&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;string_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// make an unsigned 8 bit int typed array large enough to hold image data&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;array_data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Uint8Array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;decoded_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// convert ASCII string to unsigned 8 bit int array&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;decoded_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;array_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;decoded_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;charCodeAt&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// just show this data on the console, for now...&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;console&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;array_data&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;For now, we just print the byte array to console rather than sending it to the C
program, but we can see from looking at the array that the bytes two to four are
the values &lt;code&gt;80&lt;/code&gt;, &lt;code&gt;78&lt;/code&gt;, &lt;code&gt;71&lt;/code&gt;, that is the ASCII codes for the letters &amp;lsquo;P&amp;rsquo;, &amp;lsquo;N&amp;rsquo;
and &amp;lsquo;G&amp;rsquo;, as required by the &lt;a href=&#34;https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_header&#34;&gt;file header of a png file&lt;/a&gt;.
It&amp;rsquo;s starting to ominously look like things are going to work&amp;hellip;&lt;/p&gt;

&lt;p&gt;Rather than just logging the data, we just need to pass it to that C function
&lt;a href=&#34;#load_image_section&#34;&gt;&lt;code&gt;load_image&lt;/code&gt;&lt;/a&gt; we discussed writing so long ago. There are
one or two subtleties that should be taken into account; you need to be aware
that the image byte getting function may well end up being called before the
Emscripten run-time is loaded and the exported image loading function set up,
or, conversely, that Emscripten may be loaded and ready to go before any image
bytes have been got and so there is no image to show. I circumvent this
potential problem by initialising a &lt;code&gt;load_image&lt;/code&gt; variable to 0 and later
overwriting it with the wrapped &lt;code&gt;load_image&lt;/code&gt; C function once Emscripten has
loaded, and having a &lt;code&gt;image_bytes&lt;/code&gt; variable, similary set to 0 and overwritten
with the image byte array once the image bytes have been retrieved. In this way
you can figure out in the code when the &lt;code&gt;load_image&lt;/code&gt; function or &lt;code&gt;image_bytes&lt;/code&gt;
are available.&lt;/p&gt;

&lt;p&gt;The example below is very simple, featuring two &lt;code&gt;HTMLImageElement&lt;/code&gt;s and having
the &lt;code&gt;onClick&lt;/code&gt; handler of both of them call an exported C function that changes
the texture that SDL shows (after remembering to free any previously created
texture, of course!). The initialisation of SDL and creation of the
&lt;code&gt;SDL_Renderer&lt;/code&gt; are done only once, in a separate exported C function, and since
the context is kept in a virtual scope it is persistent and available after this
initialising function is called and for every subsequent call of &lt;code&gt;load_image&lt;/code&gt;.
See the source code below for details&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/pages/show_img.html&#34;&gt;
&lt;img style=&#34;display:block;margin-left:auto;margin-right:auto&#34; src=&#34;https://lyceum-allotments.github.io/images/basic_image_viewer_screen_shot.png&#34; alt=&#34;basic image viewer screenshot&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/show_img.html&#34;&gt;show_img.html&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/show_img.tar.gz&#34;&gt;show_img.tar.gz&lt;/a&gt;, &lt;a href=&#34;https://lyceum-allotments.github.io/code/show_img.zip&#34;&gt;show_img.zip&lt;/a&gt;]&lt;/p&gt;

&lt;h2 id=&#34;wrapping-it-all-up:60e792496b2fdcb01205cf2b17ae4f4f&#34;&gt;Wrapping It All Up&lt;/h2&gt;

&lt;p&gt;Our image viewer as-is provides the bare bones for a zoomable image viewer;
the bytes of &lt;code&gt;HTMLImageElements&lt;/code&gt; can be passed to an Emscripten C program where we
can load them into an &lt;code&gt;SDL_Texture&lt;/code&gt; and from that point any manipulations such
as panning or zooming will be much easier to achieve and possibly handled by
webGL if the client supports it.&lt;/p&gt;

&lt;p&gt;It remains though to create a nice interface to all this, this means providing
the neat object interface to an image viewer mentioned at the start, bundling
the JavaScript code that&amp;rsquo;s been produced so it can be easily included in a page
and protecting the scope of the produced code so that the variables don&amp;rsquo;t polute
the global JavaScript scope and a user can easily include multiple image viewers
in a page.&lt;/p&gt;

&lt;p&gt;All the JavaScript that Emscripten&amp;rsquo;s produced so far has started with something
similar to the following bit of JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{};&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// and then a long load of&lt;/span&gt;
                                                     &lt;span style=&#34;color: #75715e&#34;&gt;// hard to understand JavaScript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;In other words, a Module object is introduced into the current scope (in
examples we&amp;rsquo;ve done so this has been the global scope). This is bad from the
point of view of providing a neat encapsulated interface; a user naively including
this code twice in a page would simply overwrite all Emscripten&amp;rsquo;s carefully
declared variables and they wouldn&amp;rsquo;t get the two image viewers they were
wanting.&lt;/p&gt;

&lt;p&gt;What is needed is a function to be defined encapsulating all this code which can
be called with a set of options and each time sets up a separate Emscripten
runtime. As luck would have it a couple of &lt;code&gt;emcc&lt;/code&gt; compile time options can
achieve that very effect. The setting &lt;code&gt;-s MODULARIZE=1&lt;/code&gt; tells Emscripten to
produce the following JavaScript instead of that described above:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;EXPORT_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{};&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// and then a long load of hard&lt;/span&gt;
                &lt;span style=&#34;color: #75715e&#34;&gt;// to understand JavaScript&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;EXPORT_NAME&lt;/code&gt; is a string defined by the &lt;code&gt;emcc&lt;/code&gt; setting &lt;code&gt;-s EXPORT_NAME&lt;/code&gt;. For
example, including the setting &lt;code&gt;-s EXPORT_NAME=&amp;quot;&#39;EmImgViewer&#39;&amp;quot;&lt;/code&gt; when &lt;code&gt;emcc&lt;/code&gt; is
called will lead to a function named &lt;code&gt;EmImgViewer&lt;/code&gt; being added to the current
scope. Calling this function with a &lt;code&gt;Module&lt;/code&gt; configuration object, the same as
the Module object we were defining in global scope previously, will lead to an
Emscripten runtime being created. Calling &lt;code&gt;EmImgViewer&lt;/code&gt; will create an
Emscripten image viewer, calling &lt;code&gt;EmImgViewer&lt;/code&gt; again, with a different
configuration option, perhaps specifying a different canvas and different
functions to use to wrap exported functions, will create a completely separate
&lt;code&gt;EmImgViewer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is still not the friendliest interface to provide to a user; firstly, they
have to know all about Emscripten and the configuration option object they need
to pass to &lt;code&gt;EmImgViewer&lt;/code&gt;, secondly, they need to know about C functions that are
exported by the &lt;code&gt;EmImgViewer&lt;/code&gt; so they can wrap them in JavaScript functions and
so manipulate the viewer. For this reason, we need to hand-craft a bit more
JavaScript to neaten up the interface and make the image viewer more easily
usable.&lt;/p&gt;

&lt;p&gt;We will put this in a file, &lt;code&gt;post_img_viewer.js&lt;/code&gt;, that will be appended to the
compiled JavaScript and define an &lt;code&gt;ImgViewer&lt;/code&gt; object. When constructed, through
a call to &lt;code&gt;ImgViewer(image, canvas)&lt;/code&gt;, the user specifies an initial image and a
canvas to use for a display. At this point the Emscripten runtime is created, a
call back defined to set-up the viewer when the runtime is ready, and the bytes
of the image element are prepared for viewing.
The construtor of the object will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ImgViewer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas_element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Uint8Array of bytes of image will be stored here&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;image_bytes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Emscripten exported function for loading an image into&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// the viewer will be stored here&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImage&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImageBytes&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// function gets bytes of `image` and stores an array of &lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// these bytes in image_bytes&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas_element&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// set the canvas to be what the&lt;/span&gt;
                                 &lt;span style=&#34;color: #75715e&#34;&gt;// user specified&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;})(),&lt;/span&gt;
      &lt;span style=&#34;color: #a6e22e&#34;&gt;onRuntimeInitialized&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ccall&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;setup_context&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// once runtime is initialized&lt;/span&gt;
                                             &lt;span style=&#34;color: #75715e&#34;&gt;// call the C function to&lt;/span&gt;
                                             &lt;span style=&#34;color: #75715e&#34;&gt;// initialize SDL and set up the&lt;/span&gt;
                                             &lt;span style=&#34;color: #75715e&#34;&gt;// context&lt;/span&gt;

          &lt;span style=&#34;color: #75715e&#34;&gt;// wrap the `load_image` C function in a private method of &lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;// this object&lt;/span&gt;
          &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImage&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;cwrap&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;load_image&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;array&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

          &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image_bytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// if an image has already been loaded by the time&lt;/span&gt;
                           &lt;span style=&#34;color: #75715e&#34;&gt;// this call back is called, load the image bytes&lt;/span&gt;
                           &lt;span style=&#34;color: #75715e&#34;&gt;// into the viewer&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image_bytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;image_bytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// load the initial image&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImageBytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// create an image viewer with the options&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;EmImgViewer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// TODO return the object interface...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;After the object is constructed, we should return the object&amp;rsquo;s interface &amp;ndash; the set
of public methods that the user can call. In this case, the interface is one
method, &lt;code&gt;changeImage&lt;/code&gt;. This is quite simple, all it has to do is load the image
bytes from the &lt;code&gt;HTMLImageElement&lt;/code&gt; passed to it as an argument and then call the
wrapped &lt;code&gt;load_image&lt;/code&gt; C function to put these bytes onto the canvas:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;// returning the object interface...&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;changeImage&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// method to change viewer&amp;#39;s image&lt;/span&gt;
                                          &lt;span style=&#34;color: #75715e&#34;&gt;// to the HTTPImageElement `image`&lt;/span&gt;
            &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImageBytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;loadImage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #a6e22e&#34;&gt;loadImage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image_bytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;image_bytes&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Upon altering the &lt;code&gt;Makefile&lt;/code&gt; of the project to concatenate this JavaScript file
at the end of the Emscripten produced JavaScript, we are left with one script
file that our image viewer users should include in a page in order to use our
image viewer. All that is required in order to use the image viewer is that this
script be included and the &lt;code&gt;ImgViewer&lt;/code&gt; constructor called specifying the &lt;code&gt;image&lt;/code&gt;
to be shown and the &lt;code&gt;canvas&lt;/code&gt; to show it on. An example of how to do this is
given below:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;img_viewer.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setup_viewer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementById&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;viewer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ImgViewer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;static/owl.png&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;onLoad&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;setup_viewer(this)&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;viewer.changeImage(this)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;static/cat.png&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;onClick&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;viewer.changeImage(this)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;It is worth reemphasising that because the Emscripten code is now nicely
encapsulated, there is nothing to stop an &lt;code&gt;ImgViewer&lt;/code&gt; being instantiated being
given a different &lt;code&gt;canvas&lt;/code&gt; element and voila, with no effort you have two image
viewers on one page! See the example and source code below for details:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/pages/img_viewer/img_viewer.html&#34;&gt;
&lt;img style=&#34;display:block;margin-left:auto;margin-right:auto&#34; src=&#34;https://lyceum-allotments.github.io/images/double_image_viewer_screen_shot.png&#34; alt=&#34;double image viewer screenshot&#34;&gt;
&lt;/a&gt;
[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/img_viewer/img_viewer.html&#34;&gt;img_viewer.html&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/img_viewer.tar.gz&#34;&gt;img_viewer.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/img_viewer.zip&#34;&gt;img_viewer.zip&lt;/a&gt;]&lt;/p&gt;

&lt;h2 id=&#34;the-final-product:60e792496b2fdcb01205cf2b17ae4f4f&#34;&gt;The Final Product&lt;/h2&gt;

&lt;p&gt;The steps that remain now are all SDL and C. Events such as mouse button clicks
must be listened to and converted into manipultions of the &lt;code&gt;SDL_Texture&lt;/code&gt;
containing the image. There is nothing specific to Emscripten here except for
the calling of &lt;code&gt;emscripten_set_main_loop&lt;/code&gt; rather than having a main animation
loop, as described &lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-5-move-owl/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Links to an example page using the &lt;code&gt;ImgViewer&lt;/code&gt; and to the github repository
containing the &lt;code&gt;ImgViewer&lt;/code&gt; library are included below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/pages/newsham_park/newsham_park.html&#34;&gt;
&lt;img style=&#34;display:block;margin-left:auto;margin-right:auto&#34; src=&#34;https://lyceum-allotments.github.io/images/complete_image_viewer_screen_shot.png&#34; alt=&#34;complete image viewer screenshot&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/newsham_park/newsham_park.html&#34;&gt;newsham_park.html&lt;/a&gt;, &lt;a href=&#34;https://github.com/lyceum-allotments/img_viewer&#34;&gt;img_viewer_repository&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL 2 Tutorial Part 1</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl-2-tutorial-part-1/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:07 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl-2-tutorial-part-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kripken.github.io/emscripten-site/&#34;&gt;Emscripten&lt;/a&gt;
 is a compiler that allows you to take standard C/C++ and compile it
to JavaScript, making it possible to port your C/C++ programs and run them in
any modern browser. This tutorial series aims to be your guide and lead you to using the
&lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL2&lt;/a&gt; library to implement all the basic components of a 2D game; showing an
image, moving an image and listening for user input, and enabling you to make a
game like this example of &amp;lsquo;snake&amp;rsquo; with relative ease in C/C++, all without
writing a single line of JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/pages/snake.html&#34;&gt;
&lt;img style=&#34;display:block;margin-left:auto;margin-right:auto&#34; src=&#34;https://lyceum-allotments.github.io/images/snake_screen_shot.png&#34; alt=&#34;snake screenshot&#34;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tutorial is broken into the following stages, that take you from an
introduction into what Emscripten does to making a customised web-site to host
your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-2-introduction-to-llvm-emscripten-and-asm.js/&#34;&gt;&lt;strong&gt;Introduction to LLVM, Emscripten and asm.js&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; a discussion of the various tools that will be used and how they work together&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-3-hello-world/&#34;&gt;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;/a&gt;
&amp;ndash; the Emscripten compiler is downloaded and the classic hello world program written and compiled&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-4-look-owl/&#34;&gt;&lt;strong&gt;Look, Owl&lt;/strong&gt;&lt;/a&gt; &amp;ndash; the SDL2 media library is used with Emscripten to display a
delightful image of an owl&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-5-move-owl/&#34;&gt;&lt;strong&gt;Move, Owl&lt;/strong&gt;&lt;/a&gt; &amp;ndash; upping the complexity level and moving the owl depending on
user input&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-6-write-owl/&#34;&gt;&lt;strong&gt;Write Owl&lt;/strong&gt;&lt;/a&gt; &amp;ndash; using the SDL2_TTF font rendering library to put some text
into the scene&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-7-get-naked-owl/&#34;&gt;&lt;strong&gt;Get Naked, Owl&lt;/strong&gt;&lt;/a&gt; &amp;ndash; making some final tweaks to the presentation of our
application&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-8-making-something-practical/&#34;&gt;&lt;strong&gt;Making Something Practical&lt;/strong&gt;&lt;/a&gt;&amp;ndash; a bigger project, a game of snake, is
discussed and issues surrounding bigger projects addressed&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this tutorial&amp;rsquo;s helpful to you and wish you all the best as you dive into
the brave new world of transpiling C/C++ into JavaScript!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 2: Introduction to LLVM, Emscripten and asm.js</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-2-introduction-to-llvm-emscripten-and-asm.js/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:06 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-2-introduction-to-llvm-emscripten-and-asm.js/</guid>
      <description>&lt;p&gt;JavaScript is a remarkable language, cobbled together in 10 days in 1995 and
intended to be a forgiving language to enable simple pieces of interactivity to
be incorporated into web pages, it now finds itself implemented in every
graphical web-browser and the natural choice for writing client-side web-apps
that run anywhere that will run a browser.&lt;/p&gt;

&lt;p&gt;Rather like a drunken tattoo of Baphomet acquired at a time when you&amp;rsquo;d no idea
you would later wish to join the clergy, the issue now is how to deal with the
consequences of this unforseeable unfortunate choice. There are multiple
options. The first is simply to join the occult, JavaScript has its redeeming
features (as, I&amp;rsquo;m sure, so does Satanism) and some espouse adopting it on
&lt;strong&gt;both&lt;/strong&gt; the client and server side of things.
&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt; facilitates this, this while
&lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; and &lt;a href=&#34;http://couchdb.apache.org/&#34;&gt;CouchDB&lt;/a&gt;
allow even database queries to be scripted in JavaScript.&lt;/p&gt;

&lt;p&gt;Another option when confronted with an unwanted tattoo of a Satanic goat etched
onto your chest (we&amp;rsquo;ve all been there) is to embilish it and render it less
offensive to whatever type of people it is normally make up vicar school
interview panels. Altering it so it resembles a much-missed former family pet,
say, or a favourite Disney character. This is the path favoured by JavaScript
libraries such as &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; or
&lt;a href=&#34;http://mootools.net/&#34;&gt;MooTools&lt;/a&gt;, libraries which take JavaScript and build,
using JavaScript, a better JavaScript - one with nice functional programming
constructs and sane universal ways of accessing the DOM.&lt;/p&gt;

&lt;p&gt;There is, however, a third way to hide your ill-advised ink, this is the route
chosen by Emscripten and the subject of this tutorial - it is simply to to cover
it up. The Satanic symbol will remain there underneath but the outside world can
deal with something much more old-fashioned and acceptable, like a Fair Isle
patterned jumper, or, as in Escripten&amp;rsquo;s case, C++.&lt;/p&gt;

&lt;p&gt;Emscripten&amp;rsquo;s functionality is simple, it takes normal C or C++, and with the
help of parts of the &lt;a href=&#34;http://llvm.org/&#34;&gt;LLVM&lt;/a&gt; compiler tool-chain produces not
assembler code as normal compilers do, but JavaScript that can run in any
(modern) browser.&lt;/p&gt;

&lt;p&gt;There are a number of advantages of this. Firstly, if you don&amp;rsquo;t know JavaScript
but do know C++, you can write C++, not JavaScript. Secondly, you get to take
advantage of using a strongly-typed language if you like that sort of thing. A
strict compiler with static analysis, whilst being occassionally frustrating,
can catch a large number of bugs before the compiler even lets you run your
code, bugs that the more forgiving JavaScript will often leave for your users to
discover. Finally, it is possible to use the fact that C/C++ is a language
designed to be compiled into optimised assembler, running quicker than assembler
any human could write, to compile C/C++ into optimised JavaScript that runs
quicker than JavaScript any human could write.&lt;/p&gt;

&lt;p&gt;This optimised subset of JavaScript is known as &lt;a href=&#34;http://asmjs.org/&#34;&gt;asm.js&lt;/a&gt;, a
strict sub-set of JavaScript where the features chosen to be included are
designed to be suitable for being aggressively optimised by JavaScript
interpreters. The specific subset of asm.js was originally chosen and designed
by Mozilla, and a highly optimised interpretter inplemented as part of the
Firefox browser, but implementations of optimised asm.js interpretters are now
implemented into the Chrome and Edge browsers.&lt;/p&gt;

&lt;p&gt;Emscripten can be seen as more or less a drop-in replacement for C compilers
gcc or clang, C/C++ files are compiled and linked into a JavaScript executable
which can then be incorporated into a website and run in any web-browser. That
it can compile C/C++ with few alterations means that it is suited to compiling
existing libraries and making their functionality available in the browser with
minimal effort. Thus, rather than writing a 2D physics engine in JavaScript,
and pulling your hair out trying to get it to run fast enough to power your
simulation of irritable birds before your game is beaten to market, you can
simply compile an existing C/C++ library like Bullet and job done. As an
illustration of what web-browsers can achieve if you only ask them nicely, some
show-offs compiled the &lt;a href=&#34;https://www.youtube.com/watch?v=BV32Cs_CMqo&#34;&gt;Unreal 3D&lt;/a&gt;
game engine into asm.js and the results are very impressive indeed.&lt;/p&gt;

&lt;p&gt;This tutorial series will put you on the path to becoming that impressive,
using an Emscripten port of SDL2 to implement all the basic components of a
game, loading and displaying an image, moving it, and listening for user input.
SDL2 was designed to be a thin layer of abstraction over a computer&amp;rsquo;s graphics,
input, and audio components, and so it proves in JavaScript, the port of SDL2
enables you to effortless, and while barely noticing it, leverage technologies
such as webGL and so you can rest at ease that your application will be using
the client&amp;rsquo;s native graphics drivers if the brower supports it.&lt;/p&gt;

&lt;p&gt;Before we start all that though we should concentrate on walking before we can
run and start off the same way that any adventure in silicon tends to start, by
corralling Emscripten to say &amp;lsquo;hello world&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-3-hello-world/&#34;&gt;&lt;strong&gt;Part 3: Hello World&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 3: Hello World</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-3-hello-world/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:05 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-3-hello-world/</guid>
      <description>&lt;p&gt;The Emscripten SDK containing the Emscripten compiler can be downloaded
&lt;a href=&#34;https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html&#34;&gt;here&lt;/a&gt;.
On Linux and MacOS some dependencies need to be installed prior to installing
the compiler, details of these and instructions for their installation can be
found &lt;a href=&#34;https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html#platform-notes-installation-instructions-portable-sdk&#34;&gt;here&lt;/a&gt;
but after those are dealt with the installlation of Emscripten itself is quite
straightforward; if you&amp;rsquo;re using the portable SDK it&amp;rsquo;s a case of unzipping it in
a convenient place, changing into the &amp;lsquo;emsdk_portable&amp;rsquo; directory and running the
following commands which fetch the latest online tools from the web, installs
them, and makes them active:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emsdk&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;update&lt;/span&gt; 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emsdk&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;install&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;latest&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emsdk&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;activate&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linux and MacOS X require a further step to set the system path to the active
version of Emscripten:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emsdk_env.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If all this has worked as it should, you should have the Emscripten compiler,
&lt;code&gt;emcc&lt;/code&gt;, at the file path &lt;code&gt;./emscripten/master/emcc&lt;/code&gt; in the &lt;code&gt;emsdk_portable&lt;/code&gt;
directory you downloaded. You can add this to your system path, or just
reference the whole path whenever you want to invoke the compiler.&lt;/p&gt;

&lt;p&gt;To check that all this has proceeded as expected we need to write a short test
program and compile it to JavaScript. The standard C implementation of the
classic &amp;lsquo;Hello World&amp;rsquo; program will do the trick nicely:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hello world!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

[&lt;a href=&#34;https://lyceum-allotments.github.io/code/hello_world.tar.gz&#34;&gt;hello_world.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/hello_world.zip&#34;&gt;hello_world.zip&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Compile with the Emscripten C compiler with the following command:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_world.c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_world.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and you should get the files &lt;code&gt;hello_world.html&lt;/code&gt; and &lt;code&gt;hello_world.js&lt;/code&gt; appearing
in your working directory. &lt;code&gt;hello_world.js&lt;/code&gt; is the guts of your program, the
JavaScript that your C program has been compiled into. The &lt;code&gt;-o hello_world.html&lt;/code&gt;
argument which was passed to &lt;code&gt;emcc&lt;/code&gt; told &lt;code&gt;emcc&lt;/code&gt; to also generate an HTML file,
&lt;code&gt;hello_world.html&lt;/code&gt;, which interfaces with the compiled JavaScript, including the JavaScript
in an HTML document and also defining what should be done with the C program&amp;rsquo;s
output. It&amp;rsquo;s possible to write this yourself, but we&amp;rsquo;ll concentrate on
other things first, for now Emscripten&amp;rsquo;s way of dealing with output is
fine, via a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element for text output and a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element for
anything graphical we&amp;rsquo;ll be doing. If you open &lt;code&gt;hello_world.html&lt;/code&gt; in your
browser you should see the Emscripten HTML document with the words &lt;code&gt;hello
world!&lt;/code&gt; in the text area that&amp;rsquo;s been defined to handle stdout. I warn you, it&amp;rsquo;s
pretty spectacular.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 4: Look, Owl</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-4-look-owl/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:04 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-4-look-owl/</guid>
      <description>&lt;p&gt;Although you can do plenty of interesting things with just logic and text, to
impress the man on the Clapham omnibus these days you generally need to do
something graphical. To this end we&amp;rsquo;ll now write a program to load and show this
fetching picture of an owl coughing up a pellet:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;display:block;margin-left:auto;margin-right:auto&#34; src=&#34;https://lyceum-allotments.github.io/images/coughing_owl.png&#34; alt=&#34;couging owl&#34;&gt;&lt;/p&gt;

&lt;p&gt;Solving this problem can be broken down into two broad stages: firstly how do we
refer to the image of an owl stored on a server&amp;rsquo;s file system when it
will be viewed in a web-page visited from the client&amp;rsquo;s computer where
JavaScript runs in a sandboxed environment? Secondly, even if we can access the
image file, how do we leverage the &lt;a href=&#34;https://www.libsdl.org/&#34;&gt;SDL2&lt;/a&gt; library to
load and display it on the screen?&lt;/p&gt;

&lt;p&gt;Emscripten provides a number of ways to solve the first problem of making files
on the server accessible to C/C++ programs when they are run on a client, we
will look at two here. They both work in similar ways, a directory is specifed
and the files in that directory serialised and uploaded to the client where
Emscripten maps them to a virtual filesystem with the same layout as that of
where you compiled the program. The difference between the two methods lays in
where the files are serialised and how they are uploaded.&lt;/p&gt;

&lt;p&gt;The first option involves embedding the files in the JavaScript itself, and the
files are loaded with the JavaScript. By default, the files to be loaded should
be stored in a directory nested inside the directory where you compile your
program from. You can then tell Emscripten to embed the files inside this
directory by passing the &lt;code&gt;--embed-file &amp;lt;directory&amp;gt;&lt;/code&gt; command-line argument to
emcc at compilation.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_owl&lt;/span&gt;
    &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;│  &lt;/span&gt; 
    &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;├──&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_owl.c&lt;/span&gt;
    &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;│  &lt;/span&gt; 
    &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assets&lt;/span&gt;
        &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;images&lt;/span&gt;
            &lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;└──&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;owl.png&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take as an example this file hierarchy, if we are in the &lt;code&gt;hello_owl&lt;/code&gt; directory
and we compile &lt;code&gt;hello_owl.c&lt;/code&gt; with the command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;embed&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_owl.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then the filesystem from the &lt;code&gt;assets&lt;/code&gt; directory downwards will be serialised and
compiled into the &lt;code&gt;hello_owl.js&lt;/code&gt; JavaScript script. &lt;code&gt;hello_world.c&lt;/code&gt; could now open
the file in the same way a native C/C++ program would by calling something like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;FILE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fp&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fopen(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;assets/images/owl.png&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is all well and good, but embedding files straight in the JavaScript like
this isn&amp;rsquo;t very efficient. The problem is that everything has to be loaded in
one go over one connection. It is better if the files are stored in a separate
file and loaded separately via a XML HTTP request, Emscripten can then make sure
that the compiled JavaScript only runs once this XML HTTP request has completed
and the virtual filesystem has been set up.&lt;/p&gt;

&lt;p&gt;This is achieved in a very similar way to how a filesystem is embedded, only
this method is known as preloading the files and you would compile &lt;code&gt;hello_owl.c&lt;/code&gt;
with the following command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;preload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_owl.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This would result in a file &lt;code&gt;hello_owl.data&lt;/code&gt; being produced upon compilation,
containing the filesystem information which would then be loaded via a XML HTTP
request on loading &lt;code&gt;hello_owl.html&lt;/code&gt;. One small caveat with this method and doing
local testing on the Google Chrome or Microsoft Edge browsers is that these
browsers cannot load local files via XML HTTP requests, so local testing must be
done using a web-server as opposed to just opening &lt;code&gt;hello_owl.html&lt;/code&gt; in the browser
(alternatively, you could just do local testing in Firefox).&lt;/p&gt;

&lt;p&gt;A similar choice between embedding and preloading data occurs regarding
statically allocated memory in the C/C++ program (memory used for static
variables and such). In a program with a lot of local variables it becomes
inefficient to embed this memory in the JavaScript and upload over one
connection, in such a case it is a possible to do a thing similar to what we
just did with preloading file assets; by passing emscripten the &lt;code&gt;--memory-init-file
1&lt;/code&gt; command line argument emscripten will put the memory for static variables in a
separate file (&lt;code&gt;hello_owl.html.mem&lt;/code&gt;) which is loaded via a XML HTTP request on page
load. By telling Emscripten to use second level optimisation (the &lt;code&gt;-O2&lt;/code&gt; command
line argument) the &lt;code&gt;memory-init-file 1&lt;/code&gt; functionality will be turned on by default,
and that is what we will use from now on.&lt;/p&gt;

&lt;p&gt;Regarding the second issue of how to access SDL2 to load an image, here we can
make use of a number of libraries that have been ported to, and can be used from
within, Emscripten. Using these ports is really easy, they are all hosted on
&lt;a href=&#34;https://github.com/emscripten-ports&#34;&gt;github&lt;/a&gt;, and by passing the command line
argument &lt;code&gt;-s&lt;/code&gt; followed by the appropriate port argument they can be accessed
from within your code. A list of ports and their corresponding names can be acquired
with the command:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ports&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Doing this, we can see that Emscripten ports provides the SDL2 library and the
SDL2_image library and these are accessible by using the arguments &lt;code&gt;-s
USE_SDL=2&lt;/code&gt; and &lt;code&gt;-s USE_SDL_IMAGE=2&lt;/code&gt;. An additional subtlety that must be
observed with SDL2_image is that you must pass the image formats that you wish
SDL2_image to support, for example, to make SDL2_image support png images pass
the command &lt;code&gt;-s SDL2_IMAGE_FORMATS=&#39;[&amp;quot;png&amp;quot;]&#39;&lt;/code&gt; at compilation.&lt;/p&gt;

&lt;p&gt;Putting all this together with the previous discussion we reach the following
compilation command for a program that can load png images from a virtual
filesystem using the SDL2 library:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_owl.c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;O2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL_IMAGE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL2_IMAGE_FORMATS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;png&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt; \
    &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;preload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hello_owl.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now that we have the compilation command, all that remains for us to do is
actually write the program!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re familiar with SDL2 this step is straightforward because it&amp;rsquo;s
identical to how you&amp;rsquo;d do it for compiling for a native machine! You can
download the &lt;code&gt;hello_owl.c&lt;/code&gt; program source code below, it uses the SDL2_image
function &lt;code&gt;IMG_Load&lt;/code&gt; to load an image file (loaded from the preloaded virtual file
system) and copies that to a renderer that is then used to display the image to
the screen using SDL2 functions.&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/code/hello_owl.tar.gz&#34;&gt;hello_owl.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/hello_owl.zip&#34;&gt;hello_owl.zip&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 5: Move, Owl</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-5-move-owl/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:03 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-5-move-owl/</guid>
      <description>&lt;p&gt;We can now use SDL2 to load and display an image. The next step is to learn how
to move this image, and then to use SDL&amp;rsquo;s functions to listen for user input in
order to control the movement.&lt;/p&gt;

&lt;p&gt;Moving the image turns out to be one of those things that needs to be done a
little differently to how it is normally done in native C/C++ programs. On those
occassions you typically have a main event loop and inside that main loop you
increment the position of the image a small amount on each iteration, something
like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Initialise SDL and open window and renderer here&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;carry_on&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Surface&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;image&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;IMG_Load(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;assets/owl.png&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Texture&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;tex&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_CreateTextureFromSurface(renderer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;image);&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;


&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Have an infinite loop...&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(carry_on)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * Clear the screen&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_RenderClear(renderer);&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * Create a rectangle to copy the image into, with the x&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * location of the image set to the value of the &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * variable x that will be incremented in the loop&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Rect&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{.x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;.y&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;.w&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;.h&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * Copy the image into the renderer in the new location&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * defined by dest&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_RenderCopy&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(renderer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tex,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;dest);&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * Render the screen&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_RenderPresent(renderer);&lt;/span&gt;
  
  &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * Increment x by 5 pixels, ensuring that next time we&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   * render the image it is drawn to the right 5 pixels&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;   */&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The problem of doing this in JavaScript is related to how JavaScript is run in
the browser. The browser event model uses cooperative multitasking as a
multitasking model, this means that each event must voluntarily give control
back to the process scheduler which can then allow another process to run for a
while (until that, in turn, gives control back to the process scheduler). When
an infinite loop is implemented in the manner above the JavaScript running
process will never give control back to the browser and so no other processes in
your browser will be able to run (in actuality, your browser will detect this and
offer you the chance to shut down the offending process).&lt;/p&gt;

&lt;p&gt;Luckily, the Emscripten C API provides us with some functions that act like an
infinite loop, whilst playing nice and sharing, giving control back to the
browser periodically so that other things can be done. The one we will use here
is &lt;a href=&#34;https://kripken.github.io/emscripten-site/docs/api_reference/emscripten.h.html#c.emscripten_set_main_loop_arg&#34;&gt;&lt;code&gt;emscripten_set_main_loop_arg&lt;/code&gt;&lt;/a&gt;,
defined in the header file &lt;code&gt;emscripten.h&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;emscripten_set_main_loop_arg(em_arg_callback_func&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;func,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;arg,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fps,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;simulate_infinite_loop)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;func&lt;/code&gt; is a function pointer to a function taking a void pointer as an
argument, &lt;code&gt;arg&lt;/code&gt; is the void pointer that will be passed as an argument, &lt;code&gt;fps&lt;/code&gt; is the
number of times per second that you wish &lt;code&gt;func&lt;/code&gt; to be called and
the &lt;code&gt;simulate_infinite_loop&lt;/code&gt; arguement we will get to in a moment.&lt;/p&gt;

&lt;p&gt;It turns out that modern browsers support a method on the &lt;code&gt;window&lt;/code&gt; DOM object
specifically for the purposes of animation. This is
&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt; and calls a function repeatedly at the same rate
as the browser refresh rate. If you&amp;rsquo;re using the main loop for updating graphics
(as we will be) it is a waste of resources to update the image at a greater rate
than the browser is refreshing. By passing an &lt;code&gt;fps&lt;/code&gt; argument to
&lt;code&gt;emscripten_set_main_loop_arg&lt;/code&gt; equal to -1 Emscripten will use
&lt;code&gt;requestAnimationFrame&lt;/code&gt; under the bonnet and so you will not refresh the graphics
faster than the browser, in general, it is a good idea to do this.&lt;/p&gt;

&lt;p&gt;To get out of the main loop, Emscripten provides the function
&lt;a href=&#34;https://kripken.github.io/emscripten-site/docs/api_reference/emscripten.h.html#c.emscripten_cancel_main_loop&#34;&gt;&lt;code&gt;emscripten_cancel_main_loop&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;emscripten_cancel_main_loop(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;which when called will simply stop the main loop looping. It&amp;rsquo;s important to note
though, that the loop handler will not return.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a simple example using &lt;code&gt;emscripten_set_main_loop_arg&lt;/code&gt; and
&lt;code&gt;emscripten_canel_main_loop&lt;/code&gt; to pass an integer to a loop function and increment
it until it equals 100 at which point the looping is stopped:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * Provides emscripten_set_main_loop_arg and emscripten_cancel_main_loop&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;emscripten.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * A context structure that we can use for passing variables to our loop&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * function, in this case it just contains a single integer&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; * The loop handler, will be called repeatedly&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;loop_fn&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;arg)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;arg;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;x: %d&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x);&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(ctx&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;         * After 101 iterations, stop looping&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;         */&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;emscripten_cancel_main_loop();&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;got here...&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;simulate_infinite_loop&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx.x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;emscripten_set_main_loop_arg(loop_fn,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ctx,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;simulate_infinite_loop);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * If simulate_infinite_loop = 0, emscripten_set_main_loop_arg won&amp;#39;t block&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * and this code will run straight away.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     * If simulate_infinite_loop = 1 then this code will not be reached&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;quitting...&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/code/loop_test.tar.gz&#34;&gt;loop_test.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/loop_test.zip&#34;&gt;loop_test.zip&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;This example can be simply altered to illustrate the effect of the
&lt;code&gt;simulate_infinite_loop&lt;/code&gt; argument given to &lt;code&gt;emscripten_set_main_loop_arg&lt;/code&gt;. When it
is set to 0, the call to &lt;code&gt;emscripten_set_main_loop_arg&lt;/code&gt; won&amp;rsquo;t block, code after it
will execute simulataneously to the looping. This means that if you have
clean-up code after your main loop has finished, you risk calling it and cleaning
up stuff that your main loop might still need. Setting &lt;code&gt;simulate_infinite_loop&lt;/code&gt; to
1 will prevent this from happening, and the compiled JavaScript will stop the
execution of the caller at this point. This means that the code after the loop
will never be reached, note that this means it won&amp;rsquo;t be reached even after
&lt;code&gt;emscripten_cancel_main_loop&lt;/code&gt; is called!&lt;/p&gt;

&lt;p&gt;With a straight-forward application of these principles we can alter our
&lt;code&gt;hello_owl&lt;/code&gt; program so that we can listen to user input and move the owl picture
as appropriate. All we have to do is poll the SDL event system on each loop
iteration to check if the user has pressed any buttons and if so to react
appropriately. Depending on what button was pressed the destination rectangle
that the owl image is rendered into is moved.&lt;/p&gt;

&lt;p&gt;An example implementing this can be seen and source-code downloaded below:&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/move_owl.html&#34;&gt;move_owl.html&lt;/a&gt;, &lt;a href=&#34;https://lyceum-allotments.github.io/code/move_owl.tar.gz&#34;&gt;move_owl.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/move_owl.zip&#34;&gt;move_owl.zip&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 6: Write Owl</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-6-write-owl/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:02 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-6-write-owl/</guid>
      <description>&lt;p&gt;One final component of a game that I will cover in this tutorial is text.
Having a look at the available Emscripten ports (&lt;code&gt;emcc --show-ports&lt;/code&gt;) will
reveal a library called &lt;a href=&#34;https://www.libsdl.org/projects/SDL_ttf/&#34;&gt;SDL2_ttf&lt;/a&gt; is
at your disposal. This is a library that enables you render true type fonts
into an &lt;code&gt;SDL_Surface&lt;/code&gt;, that can then be rendered in a similar fashion to what
we&amp;rsquo;ve done previously.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--show-ports&lt;/code&gt; tells us that the command line argument we need to pass to emcc is
&lt;code&gt;-s USE_SDL_TTF=2&lt;/code&gt; so all we need to do is add that to our command line, giving
us&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;write_owl.c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;O2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL_IMAGE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL2_IMAGE_FORMATS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;png&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt; \
    &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL2_TTF&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;preload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;write_owl.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in our code we need to remember to include the SDL_TTF header file:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;SDL/SDL_ttf.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;and then we can use the SDL_TTF functions to load a true type font (that we have
uploaded to our virtual filesystem, like our image, by placing in a preloaded
directory) using:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TTF_Font&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TTF_OpenFont(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file_path,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ptsize)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;where &lt;code&gt;file_path&lt;/code&gt; is the path to the true type font in the virtual filesystem, and
&lt;code&gt;ptsize&lt;/code&gt; is the size of the font.&lt;/p&gt;

&lt;p&gt;You can render some text to an SDL_Surface by passing the resultant TTF_Font
pointer into the following function:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Surface&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;TTF_RenderText_Blended&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(TTF_Font&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;font,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;text,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL_Color&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fg);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;where font is the TTF_Font pointer, text is a pointer to the string you want to
render, and fg is the colour you want it rendered in. This surface is then just
made into a texture and rendered in same way as we did for the previous owl
image. See the soure code below for details!&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/write_owl.html&#34;&gt;write_owl.html&lt;/a&gt;, &lt;a href=&#34;https://lyceum-allotments.github.io/code/write_owl.tar.gz&#34;&gt;write_owl.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/write_owl.zip&#34;&gt;write_owl.zip&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 7: Get Naked, Owl</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-7-get-naked-owl/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:01 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-7-get-naked-owl/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re so close to being able to make the perfect game you can almost taste it,
there&amp;rsquo;s just a few things in our way &amp;ndash; all that &amp;lsquo;powered by Emscripten&amp;rsquo; gumpf
that associates itself with or masterwork every time we get Emscripten to
generate some HTML for us. That console might come in very useful when we were
needing to debug things, but now we&amp;rsquo;re convinced that our code is completely,
absolutely, bug free and we don&amp;rsquo;t need those crutches any more!&lt;/p&gt;

&lt;p&gt;The time has come to write our own HTML and say good-bye to that &amp;lsquo;powered by
Emscripten&amp;rsquo; header and debug consoles forever! Or at least until we discover
that, actually, we have got a bug&amp;hellip;&lt;/p&gt;

&lt;p&gt;To do this we need to understand a little better what Emscripten is doing when
it generates its JavaScript. A lot of it involves a
&lt;a href=&#34;https://kripken.github.io/emscripten-site/docs/api_reference/module.html&#34;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;
object, and the generated JavaScript will try and call various methods of this
object at various points. For example whenever &lt;code&gt;printf&lt;/code&gt; (or anything writing to
the &lt;code&gt;stdout&lt;/code&gt; stream) is called in C/C++ code an attempt to call the &lt;code&gt;Module.print&lt;/code&gt;
method is made and passed the text that was passed to printf. I say attempted
because when you don&amp;rsquo;t tell &lt;code&gt;emcc&lt;/code&gt; to generate HTML the &lt;code&gt;Module&lt;/code&gt; object is not
defined and it is up to you to define it and any methods you would like to use.&lt;/p&gt;

&lt;p&gt;This opens up to you such exciting possibilities of defining &lt;code&gt;Module.print&lt;/code&gt; to pop
up irritating alerts containing the text, or log them to the JavaScript console,
or append the text to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&amp;hellip; or just do nothing with it, as we&amp;rsquo;re going to do.
One method we are going to implement is &lt;code&gt;Module.canvas&lt;/code&gt;. This is a method that
takes no arguments and returns a function that also takes no arguments and
returns the DOM &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element that will be used as the &amp;lsquo;window&amp;rsquo; by our app.&lt;/p&gt;

&lt;p&gt;So to give the application a screen to show itself in, we need to put a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;
element into the HTML and define a &lt;code&gt;Module&lt;/code&gt; object with a &lt;code&gt;canvas&lt;/code&gt; method that
returns a function returning this DOM element:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementById&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;})()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another thing that is essential is loading the file with the static memory via
an XML HTTP request. This bit of JavaScript looks moderately scary, but really
it is just defining where the file containing the static memory is (in this case
&lt;code&gt;naked_owl.js.mem&lt;/code&gt;) and making a XML HTTP request to fetch this file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;memoryInitializer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;naked_owl.js.mem&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;locateFile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;function&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;memoryInitializer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;locateFile&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;](&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;memoryInitializer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;memoryInitializerPrefixURL&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;memoryInitializer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;memoryInitializerPrefixURL&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;memoryInitializer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;xhr&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;memoryInitializerRequest&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;xhr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;memoryInitializer&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;xhr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;responseType&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;arraybuffer&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #a6e22e&#34;&gt;xhr&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;send&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;})();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last thing is to load the main JavaScript (&lt;code&gt;naked_owl.js&lt;/code&gt;) and append it to the HTML
document&amp;rsquo;s body:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;createElement&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;naked_owl.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;appendChild&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;That is all that is essential for getting a graphical application to run, you
are now free to apply CSS to that page to your heart&amp;rsquo;s content, but here are
some bonus nuggets of knowledge&amp;hellip;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Module&lt;/code&gt; object has a &lt;code&gt;requestFullScreen&lt;/code&gt; method, that when invoked makes your
application go fullscreen. This takes two boolean arguments, the first says
whether to hide the mouse cursor or not, the second whether to keep the canvas
at its current resolution or to expand it to fullscreen and lower the
resolution.  Because of browser security there are some caveats to calling this,
it will only work when called from within a user triggered event, for example
clicking on a button. To make such a button an element something like this needs
to be added to the document:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fullScreenButton&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Module.requestFullScreen(true, false)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Click for full-screen&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Another thing that can come in handy for impatient users is the display of a
loading screen. This can be achieved by putting some loading message or image on your HTML
page and then making it hidden when the Emscripten application is all loaded and
ready to go. When the application is all ready it calls the
&lt;code&gt;Module.onRuntimeInitialized()&lt;/code&gt; call-back, so by providing this call-back as a
function that hides the loading message or image, the effect can be achieved of a
loading message that disappears when the game has loaded. This would make our
&lt;code&gt;Module&lt;/code&gt; object look something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;canvas&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;loadingDiv&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;The owl is loading....&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;onRuntimeInitialized&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementById&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loadingDiv&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;visibility&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hidden&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
         &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;document.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;getElementById&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;canvas&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;canvas&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;})()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;span id=&#34;ccall_section&#34;&gt;
Finally, we&amp;rsquo;ll not start the application running straight away, but add a button
that starts the application. The &lt;code&gt;Module&lt;/code&gt; object has a
&lt;a href=&#34;https://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html#ccall&#34;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;
method that can be used to call a C function from JavaScript. It takes three
argumments, the first is a string containing the name of the function, the next
gives the expected return type, the next is an array describing the types of the
arguments the C function takes. By renaming our &lt;code&gt;main&lt;/code&gt; function in our C
program, say by giving it the signature:
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;mainf&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;we can call it from a JavaScript function by doing something like this within
the HTML&amp;rsquo;s JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;start_function&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;Module&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ccall&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;mainf&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The very observant amongst you will notice that in the last couple of paragraphs
I&amp;rsquo;ve stopped referring to C/C++ and started referring to plain old C. The reason
for this is that &lt;code&gt;ccall&lt;/code&gt; only supports C functions, if you have a C++ project and you
want to call a function from within JavaScript, you&amp;rsquo;ll have to place the key
words &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; before the function definition. This is because of C++ &lt;a href=&#34;https://en.wikipedia.org/wiki/Name_mangling&#34;&gt;name
mangling&lt;/a&gt;, where in C++ you can have
two functions with the same name and Emscripten wouldn&amp;rsquo;t know which one you are
referring to.&lt;/p&gt;

&lt;p&gt;Other problems with function names can also be encountered because Emscripten
compresses its compiled JavaScript and sometimes tampers with function names. To
stop it doing this with functions you wish to call from JavaScript you have to
pass the &lt;code&gt;-s EXPORTED_FUNCTIONS:&#39;[&amp;quot;_mainf&amp;quot;]&#39;&lt;/code&gt; command line argument to &lt;code&gt;emcc&lt;/code&gt;.
Note the underscore before the function name, it&amp;rsquo;s important!&lt;/p&gt;

&lt;p&gt;To get &lt;code&gt;emcc&lt;/code&gt; to only output JavaScript, rather than HTML, change the &lt;code&gt;-o&lt;/code&gt;
argument to refer to a file with a &lt;code&gt;.js&lt;/code&gt; subscript, like so:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;emcc&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;naked_owl.c&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;O2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL_IMAGE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SDL2_IMAGE_FORMATS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;png&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USE_SDL_TTF&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; \
    &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;EXPORTED_FUNCTIONS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;_mainf&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;preload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;o&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;naked_owl.js&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Source code implementing these ideas and a page showing their effect is included
below:&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/naked_owl.html&#34;&gt;naked_owl.html&lt;/a&gt;, &lt;a href=&#34;https://lyceum-allotments.github.io/code/naked_owl.tar.gz&#34;&gt;naked_owl.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/naked_owl.zip&#34;&gt;write_owl.zip&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emscripten and SDL2 Tutorial Part 8: Making Something Practical</title>
      <link>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-8-making-something-practical/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0100</pubDate>
      
      <guid>https://lyceum-allotments.github.io/2016/06/emscripten-and-sdl2-tutorial-part-8-making-something-practical/</guid>
      <description>&lt;p&gt;At long last we&amp;rsquo;ve reached a position where we can make a 2D game that is
something like fully functional. As an illustration I&amp;rsquo;ve made a simple version
of Snake, which can act as a guide for any projects that you&amp;rsquo;d like to do.&lt;/p&gt;

&lt;p&gt;It doesn&amp;rsquo;t really cover anything conceptually new that we haven&amp;rsquo;t covered
before, there&amp;rsquo;s just more of it, with multiple source files to be compiled. One
problem that will be encountered if you just try and compile it using the
previous command is that when you try and run the program you&amp;rsquo;ll be told that
you&amp;rsquo;ve run out of memory.&lt;/p&gt;

&lt;p&gt;For dynamic memory, Emscripten declares a JavaScript typed array and passes
&amp;lsquo;pointers&amp;rsquo; to that whenever the program requests some dynamic memory. To deal
with a memory problem we simply need to make this typed array larger. By passing
the command line argument &lt;code&gt;-s TOTAL_MEMORY=67108864&lt;/code&gt; to &lt;code&gt;emcc&lt;/code&gt; a typed array of
size 67108864 bytes (that is, 2^26 bytes) will be used, which should be enough.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not sure how much memory your program is going to use it is possible
to pass the &lt;code&gt;emcc&lt;/code&gt; command line argument &lt;code&gt;-s ALLOW_MEMORY_GROWTH=1&lt;/code&gt; which allows
the memory array to grow if needs be, but this involves a performance cost.&lt;/p&gt;

&lt;p&gt;[&lt;a href=&#34;https://lyceum-allotments.github.io/pages/snake.html&#34;&gt;snake.html&lt;/a&gt;, &lt;a href=&#34;https://lyceum-allotments.github.io/code/snake.tar.gz&#34;&gt;snake.tar.gz&lt;/a&gt;,
&lt;a href=&#34;https://lyceum-allotments.github.io/code/snake.zip&#34;&gt;snake.zip&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>